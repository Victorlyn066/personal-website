---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import LikeButton from '../../components/LikeButton.astro';
import { Image } from 'astro:assets';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			/* Search bar styles */
			.search-container {
				display: flex;
				justify-content: center;
				margin-bottom: 2rem;
				animation: slideInLeft 0.6s ease-out;
				width: 960px;
				max-width: calc(100% - 2em);
				margin: 0 auto 2rem auto;
				padding: 0 1em;
				position: relative;
				left: -2em;
			}
			
			.search-box {
				position: relative;
				width: 100%;
				max-width: 400px;
			}
			
			.search-input {
				width: 100%;
				padding: 1rem 1rem 1rem 3rem;
				font-size: 1.1rem;
				border: 2px solid #e0e0e0;
				border-radius: 50px;
				background: white;
				color: #333;
				outline: none;
				transition: all 0.3s ease;
				box-shadow: 0 4px 20px rgba(0,0,0,0.08);
			}
			
			.search-input:focus {
				border-color: #2a72e5;
				box-shadow: 0 6px 30px rgba(42, 114, 229, 0.2);
				transform: translateY(-2px);
			}
			
			.search-input::placeholder {
				color: #999;
			}
			
			.search-icon {
				position: absolute;
				left: 1rem;
				top: 50%;
				transform: translateY(-50%);
				color: #666;
				font-size: 1.2rem;
				pointer-events: none;
			}
			
			.clear-search {
				position: absolute;
				right: 1rem;
				top: 50%;
				transform: translateY(-50%);
				background: none;
				border: none;
				color: #999;
				font-size: 1.2rem;
				cursor: pointer;
				padding: 0.25rem;
				border-radius: 50%;
				transition: all 0.3s ease;
				opacity: 0;
				pointer-events: none;
			}
			
			.clear-search.visible {
				opacity: 1;
				pointer-events: auto;
			}
			
			.clear-search:hover {
				color: #666;
				background: #f0f0f0;
			}
			
			/* Dark mode search styles */
			html.dark .search-input {
				background: #1a1a1a;
				color: #fff;
				border-color: #333;
			}
			
			html.dark .search-input:focus {
				border-color: #2a72e5;
				box-shadow: 0 6px 30px rgba(42, 114, 229, 0.3);
			}
			
			html.dark .search-input::placeholder {
				color: #666;
			}
			
			html.dark .search-icon {
				color: #999;
			}
			
			html.dark .clear-search:hover {
				color: #ccc;
				background: #333;
			}
			
			/* No results message */
			.no-results {
				text-align: center;
				padding: 3rem;
				color: #666;
				font-size: 1.1rem;
				display: none;
			}
			
			html.dark .no-results {
				color: #999;
			}
			
			/* Search result highlight */
			.search-highlight {
				background: linear-gradient(120deg, #fff59d 0%, #ffeb3b 100%);
				padding: 0.1rem 0.2rem;
				border-radius: 3px;
				font-weight: 600;
			}
			
			html.dark .search-highlight {
				background: linear-gradient(120deg, #555 0%, #666 100%);
				color: #fff;
			}

			/* Page animations */
			@keyframes fadeInUp {
				from {
					opacity: 0;
					transform: translateY(30px);
				}
				to {
					opacity: 1;
					transform: translateY(0);
				}
			}
			
			@keyframes slideInLeft {
				from {
					opacity: 0;
					transform: translateX(-30px);
				}
				to {
					opacity: 1;
					transform: translateX(0);
				}
			}
			
			@keyframes scaleIn {
				from {
					opacity: 0;
					transform: scale(0.95);
				}
				to {
					opacity: 1;
					transform: scale(1);
				}
			}
			
			@keyframes gradientShift {
				0% { background-position: 0% 50%; }
				50% { background-position: 100% 50%; }
				100% { background-position: 0% 50%; }
			}

			main {
				width: 960px;
				animation: fadeInUp 0.8s ease-out;
			}
			
			ul {
				display: flex;
				flex-wrap: wrap;
				gap: 2rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			
			ul li {
				width: calc(50% - 1rem);
				animation: scaleIn 0.6s ease-out calc(0.2s + var(--item-delay)) both;
				transition: all 0.3s ease;
			}
			
			ul li:nth-child(1) { --item-delay: 0s; }
			ul li:nth-child(2) { --item-delay: 0.1s; }
			ul li:nth-child(3) { --item-delay: 0.2s; }
			ul li:nth-child(4) { --item-delay: 0.3s; }
			ul li:nth-child(5) { --item-delay: 0.4s; }
			ul li:nth-child(6) { --item-delay: 0.5s; }
			ul li:nth-child(7) { --item-delay: 0.6s; }
			ul li:nth-child(8) { --item-delay: 0.7s; }
			ul li:nth-child(9) { --item-delay: 0.8s; }
			
			ul li:hover {
				transform: translateY(-8px) scale(1.02);
				box-shadow: 0 20px 40px rgba(0,0,0,0.15);
			}
			
			html.dark ul li:hover {
				box-shadow: 0 20px 40px rgba(0,0,0,0.4);
			}
			
			ul li * {
				text-decoration: none;
				transition: all 0.3s ease;
			}
			
			ul li:first-child {
				width: 100%;
				margin-bottom: 1rem;
				text-align: center;
			}
			
			ul li:first-child img {
				width: 100%;
			}
			
			ul li:first-child .title {
				font-size: 2.369rem;
			}
			
			ul li img {
				width: 100%;
				height: 200px;
				object-fit: cover;
				margin-bottom: 0.5rem;
				border-radius: 12px;
				transition: all 0.3s ease;
			}
			
			ul li a {
				display: block;
				padding: 1rem;
				border-radius: 12px;
				background: white;
				box-shadow: 0 4px 20px rgba(0,0,0,0.08);
				border: 1px solid #f0f0f0;
				transition: all 0.3s ease;
			}
			
			html.dark ul li a {
				background: #1a1a1a;
				border: 1px solid #333;
				box-shadow: 0 4px 20px rgba(0,0,0,0.3);
			}
			
			ul li a:hover {
				transform: translateY(-4px);
				box-shadow: 0 12px 30px rgba(0,0,0,0.15);
				border: 1px solid #e0e0e0;
			}
			
			html.dark ul li a:hover {
				box-shadow: 0 12px 30px rgba(0,0,0,0.4);
				border: 1px solid #444;
			}
			
			.title {
				margin: 0;
				color: rgb(var(--black));
				line-height: 1.2;
				font-weight: 700;
				transition: all 0.3s ease;
			}
			
			/* Dark mode title fix */
			html.dark .title {
				color: #fff !important;
			}
			
			.date {
				margin: 0;
				color: rgb(var(--gray));
				transition: all 0.3s ease;
			}
			
			html.dark .date {
				color: #aaa;
			}
			
			.post-likes {
				margin-top: 0.75rem;
				padding-top: 0.5rem;
				border-top: 1px solid #f0f0f0;
				display: flex;
				justify-content: center;
			}
			
			html.dark .post-likes {
				border-top-color: #333;
			}
			
			ul li a:hover h4,
			ul li a:hover .date {
				background: linear-gradient(45deg, #000 0%, #333 50%, #000 100%);
				background-size: 200% 200%;
				-webkit-background-clip: text;
				-webkit-text-fill-color: transparent;
				background-clip: text;
				animation: gradientShift 2s ease-in-out infinite;
			}
			
			html.dark ul li a:hover h4,
			html.dark ul li a:hover .date {
				background: linear-gradient(45deg, #fff 0%, #ddd 50%, #fff 100%);
				background-size: 200% 200%;
				-webkit-background-clip: text;
				-webkit-text-fill-color: transparent;
				background-clip: text;
				animation: gradientShift 2s ease-in-out infinite;
			}
			
			ul a:hover img {
				transform: scale(1.05);
				box-shadow: var(--box-shadow);
			}
			
			@media (max-width: 768px) {
				.search-container {
					margin-bottom: 1.5rem;
					width: 100%;
					max-width: calc(100% - 1rem);
					padding: 0 0.5rem;
				}
				
				.search-box {
					max-width: 300px;
				}
				
				.search-input {
					padding: 0.8rem 0.8rem 0.8rem 2.5rem;
					font-size: 1rem;
				}
				
				.search-icon {
					left: 0.8rem;
					font-size: 1rem;
				}
				
				.clear-search {
					right: 0.8rem;
					font-size: 1rem;
				}
			
				main {
					width: 100%;
					max-width: calc(100% - 1rem);
					padding: 1rem 0.5rem;
				}
				
				ul {
					gap: 1rem;
				}
				
				ul li {
					width: 100%;
					text-align: left;
				}
				
				ul li:first-child {
					margin-bottom: 1rem;
					text-align: center;
				}
				
				ul li:first-child .title {
					font-size: 1.8rem;
				}
				
				ul li a {
					padding: 1rem;
				}
				
				ul li img {
					height: 150px;
				}
				
				.title {
					font-size: 1.2rem;
					line-height: 1.3;
				}
				
				.date {
					font-size: 0.9rem;
				}
				
				ul li:hover {
					transform: translateY(-2px) scale(1.005);
				}
			}
			
			@media (max-width: 480px) {
				.search-container {
					padding: 0 0.25rem;
				}
				
				.search-box {
					max-width: 250px;
				}
				
				.search-input {
					padding: 0.75rem 0.75rem 0.75rem 2.25rem;
					font-size: 0.9rem;
				}
				
				.search-icon {
					left: 0.75rem;
					font-size: 0.9rem;
				}
				
				.clear-search {
					right: 0.75rem;
					font-size: 0.9rem;
				}
			
				main {
					padding: 0.5rem 0.25rem;
				}
				
				ul {
					gap: 0.75rem;
				}
				
				ul li a {
					padding: 0.75rem;
				}
				
				ul li img {
					height: 120px;
				}
				
				ul li:first-child .title {
					font-size: 1.5rem;
				}
				
				.title {
					font-size: 1.1rem;
				}
				
				.date {
					font-size: 0.85rem;
				}
			}
			
			/* Accessibility */
			@media (prefers-reduced-motion: reduce) {
				* {
					animation: none !important;
					transition: none !important;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<section>
				<!-- Search functionality -->
				<div class="search-container">
					<div class="search-box">
						<span class="search-icon">üîç</span>
						<input 
							type="text" 
							class="search-input" 
							placeholder="Search blog posts..." 
							id="searchInput"
						/>
						<button class="clear-search" id="clearSearch">‚úï</button>
					</div>
				</div>
				
				<!-- Posts list -->
				<ul id="postsList">
					{
						posts.map((post) => (
							<li data-title={post.data.title.toLowerCase()} data-description={post.data.description?.toLowerCase() || ''}>
								<a href={`/blog/${post.id}/`}>
									{post.data.heroImage && (
										<Image width={720} height={360} src={post.data.heroImage} alt="" />
									)}
									<h4 class="title">{post.data.title}</h4>
									<p class="date">
										<FormattedDate date={post.data.pubDate} />
									</p>
									<div class="post-likes">
										<LikeButton postId={post.id} size="small" />
									</div>
								</a>
							</li>
						))
					}
				</ul>
				
				<!-- No results message -->
				<div class="no-results" id="noResults">
					<p>No blog posts found matching your search.</p>
					<p>Try different keywords or browse all posts below.</p>
				</div>
			</section>
		</main>
		<Footer />
		
		<script>
			// Search functionality
			const searchInput = document.getElementById('searchInput') as HTMLInputElement | null;
			const clearButton = document.getElementById('clearSearch') as HTMLButtonElement | null;
			const postsList = document.getElementById('postsList') as HTMLUListElement | null;
			const noResults = document.getElementById('noResults') as HTMLDivElement | null;
			
			if (!searchInput || !clearButton || !postsList || !noResults) {
				console.error('Search elements not found');
			} else {
				const posts = Array.from(postsList.querySelectorAll('li'));
				
				function highlightText(text: string, searchTerm: string): string {
					if (!searchTerm) return text;
					const regex = new RegExp(`(${searchTerm})`, 'gi');
					return text.replace(regex, '<span class="search-highlight">$1</span>');
				}
				
				function filterPosts() {
					const searchTerm = searchInput!.value.toLowerCase().trim();
					let visibleCount = 0;
					
					// Show/hide clear button
					clearButton!.classList.toggle('visible', searchTerm.length > 0);
					
					posts.forEach(post => {
						const title = post.dataset.title || '';
						const description = post.dataset.description || '';
						const titleElement = post.querySelector('.title');
						
						if (!titleElement) return;
						
						const originalTitle = titleElement.textContent || '';
						
						if (title.includes(searchTerm) || description.includes(searchTerm)) {
							post.style.display = 'block';
							visibleCount++;
							
							// Highlight matching text in title
							if (searchTerm) {
								titleElement.innerHTML = highlightText(originalTitle, searchTerm);
							} else {
								titleElement.textContent = originalTitle;
							}
						} else {
							post.style.display = 'none';
						}
					});
					
					// Show/hide no results message
					noResults!.style.display = visibleCount === 0 && searchTerm ? 'block' : 'none';
					postsList!.style.display = visibleCount === 0 && searchTerm ? 'none' : 'flex';
				}
				
				function clearSearch() {
					searchInput!.value = '';
					filterPosts();
					searchInput!.focus();
				}
				
				// Event listeners
				searchInput.addEventListener('input', filterPosts);
				searchInput.addEventListener('keydown', (e) => {
					if (e.key === 'Escape') {
						clearSearch();
					}
				});
				clearButton.addEventListener('click', clearSearch);
				
				// Focus search input with keyboard shortcut (Ctrl/Cmd + K)
				document.addEventListener('keydown', (e) => {
					if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
						e.preventDefault();
						searchInput!.focus();
					}
				});
			}
		</script>
	</body>
</html>
