---
// LikeButton.astro - Like system for blog posts
interface Props {
  postId: string;
  showCount?: boolean;
  size?: 'small' | 'medium' | 'large';
}

const { postId, showCount = true, size = 'medium' } = Astro.props;
---

<div class={`like-button-container ${size}`} data-post-id={postId}>
  <button class="like-button" aria-label="Like this post">
    <svg class="heart-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
    </svg>
    <svg class="heart-filled" width="20" height="20" viewBox="0 0 24 24" fill="currentColor" stroke="none">
      <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
    </svg>
  </button>
  {showCount && <span class="like-count">0</span>}
</div>

<script>
  // Like system functionality
  class LikeSystem {
    constructor() {
      this.initializeLikes();
    }

    initializeLikes() {
      document.addEventListener('DOMContentLoaded', () => {
        const likeContainers = document.querySelectorAll('.like-button-container');
        likeContainers.forEach(container => {
          const postId = container.getAttribute('data-post-id');
          if (postId) {
            this.setupLikeButton(container, postId);
            this.loadLikeData(container, postId);
          }
        });
      });
    }

    setupLikeButton(container: Element, postId: string) {
      const button = container.querySelector('.like-button');
      if (button) {
        button.addEventListener('click', () => {
          this.toggleLike(container, postId);
        });
      }
    }

    loadLikeData(container: Element, postId: string) {
      // Get user's personal like data from localStorage
      const userLikes = this.getUserLikes();
      const userLikeData = userLikes[postId] || { userLiked: false, personalLikes: 0 };
      
      // Get the shared base count (same for all users)
      const baseCount = this.getInitialLikesForPost(postId);
      
      // Add simulated community engagement (small random additions that change slowly)
      const communityBonus = this.getCommunityBonus(postId);
      
      // Total count = base + community bonus + user's personal contribution
      const totalCount = baseCount + communityBonus + userLikeData.personalLikes;
      
      // Save user data if it's new
      if (!userLikes[postId]) {
        userLikes[postId] = userLikeData;
        localStorage.setItem('blog-user-likes', JSON.stringify(userLikes));
      }
      
      // Update UI
      this.updateLikeDisplay(container, totalCount, userLikeData.userLiked);
    }

    getCommunityBonus(postId: string) {
      // Simulate additional community likes that change slowly over time
      let hash = 0;
      for (let i = 0; i < postId.length; i++) {
        const char = postId.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
      }
      
      const now = new Date();
      const hoursSinceEpoch = Math.floor(now.getTime() / (1000 * 60 * 60));
      const communityHash = Math.abs(hash * 7) % 1000;
      
      // Community bonus changes every few hours, simulating real user activity
      const changeInterval = 12; // Changes every 12 hours
      const intervalsSinceStart = Math.floor(hoursSinceEpoch / changeInterval);
      const communityGrowth = (communityHash + intervalsSinceStart) % 5; // 0-4 bonus likes
      
      return communityGrowth;
    }

    getInitialLikesForPost(postId: string) {
      // Generate consistent base count + simulated growth over time
      let hash = 0;
      for (let i = 0; i < postId.length; i++) {
        const char = postId.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32bit integer
      }
      
      // All posts get initial likes between 0-50
      const baseMin = 0;
      const baseMax = 50;
      
      // Get base count from hash (0-50 range)
      const rangeHash = Math.abs(hash >> 8);
      const baseCount = baseMin + (rangeHash % (baseMax - baseMin + 1));
      
      return baseCount;
    }

    toggleLike(container: Element, postId: string) {
      const userLikes = this.getUserLikes();
      const userLikeData = userLikes[postId] || { userLiked: false, personalLikes: 0 };
      
      // Toggle like status
      if (userLikeData.userLiked) {
        userLikeData.personalLikes = Math.max(0, userLikeData.personalLikes - 1);
        userLikeData.userLiked = false;
      } else {
        userLikeData.personalLikes += 1;
        userLikeData.userLiked = true;
        // Add animation
        this.animateLike(container);
      }
      
      // Save user data to localStorage
      userLikes[postId] = userLikeData;
      localStorage.setItem('blog-user-likes', JSON.stringify(userLikes));
      
      // Calculate total count for display
      const baseCount = this.getInitialLikesForPost(postId);
      const communityBonus = this.getCommunityBonus(postId);
      const totalCount = baseCount + communityBonus + userLikeData.personalLikes;
      
      // Update UI
      this.updateLikeDisplay(container, totalCount, userLikeData.userLiked);
    }

    updateLikeDisplay(container: Element, count: number, userLiked: boolean) {
      const button = container.querySelector('.like-button');
      const countSpan = container.querySelector('.like-count');
      
      if (button) {
        button.classList.toggle('liked', userLiked);
      }
      
      if (countSpan) {
        countSpan.textContent = this.formatCount(count);
      }
    }

    formatCount(count: number) {
      if (count >= 1000) {
        return (count / 1000).toFixed(1).replace(/\.0$/, '') + 'k';
      }
      return count.toString();
    }

    animateLike(container: Element) {
      const button = container.querySelector('.like-button');
      if (button) {
        button.classList.add('animate-like');
        setTimeout(() => {
          button.classList.remove('animate-like');
        }, 600);
      }
    }

    getUserLikes() {
      try {
        return JSON.parse(localStorage.getItem('blog-user-likes') || '{}');
      } catch {
        return {};
      }
    }
  }

  // Initialize like system
  new LikeSystem();
</script>

<style>
  .like-button-container {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    user-select: none;
  }

  .like-button {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 50%;
    transition: all 0.3s ease;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .like-button:hover {
    background: rgba(239, 68, 68, 0.1);
    transform: scale(1.1);
  }

  .heart-icon {
    color: #6b7280;
    transition: all 0.3s ease;
  }

  .heart-filled {
    position: absolute;
    color: #ef4444;
    opacity: 0;
    transform: scale(0);
    transition: all 0.3s ease;
  }

  .like-button.liked .heart-icon {
    opacity: 0;
    transform: scale(0);
  }

  .like-button.liked .heart-filled {
    opacity: 1;
    transform: scale(1);
  }

  .like-button.animate-like {
    animation: likeAnimation 0.6s ease-out;
  }

  @keyframes likeAnimation {
    0% { transform: scale(1); }
    15% { transform: scale(1.3); }
    30% { transform: scale(1.1); }
    45% { transform: scale(1.25); }
    60% { transform: scale(1.05); }
    75% { transform: scale(1.15); }
    100% { transform: scale(1); }
  }

  .like-count {
    font-size: 0.9rem;
    font-weight: 600;
    color: #6b7280;
    min-width: 2rem;
    text-align: left;
    transition: color 0.3s ease;
  }

  /* Size variants */
  .like-button-container.small {
    gap: 0.25rem;
  }

  .like-button-container.small .like-button {
    padding: 0.25rem;
  }

  .like-button-container.small .heart-icon,
  .like-button-container.small .heart-filled {
    width: 16px;
    height: 16px;
  }

  .like-button-container.small .like-count {
    font-size: 0.8rem;
    min-width: 1.5rem;
  }

  .like-button-container.large {
    gap: 0.75rem;
  }

  .like-button-container.large .like-button {
    padding: 0.75rem;
  }

  .like-button-container.large .heart-icon,
  .like-button-container.large .heart-filled {
    width: 24px;
    height: 24px;
  }

  .like-button-container.large .like-count {
    font-size: 1.1rem;
    min-width: 2.5rem;
  }

  /* Dark mode support */
  html.dark .like-button:hover {
    background: rgba(239, 68, 68, 0.2);
  }

  html.dark .heart-icon {
    color: #9ca3af;
  }

  html.dark .like-count {
    color: #9ca3af;
  }

  html.dark .like-button.liked + .like-count {
    color: #ef4444;
  }

  .like-button.liked + .like-count {
    color: #ef4444;
  }

  /* Accessibility */
  .like-button:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  @media (prefers-reduced-motion: reduce) {
    .like-button,
    .heart-icon,
    .heart-filled,
    .like-count {
      transition: none;
    }
    
    .like-button.animate-like {
      animation: none;
    }
  }
</style> 