---
// Comments Component with Gmail Login
import { GOOGLE_CONFIG } from '../config/google';

interface Props {
  postSlug: string;
}

const { postSlug } = Astro.props;
---

<div class="comments-section" id="comments-section" data-post-slug={postSlug}>
  <div class="comments-header">
  <h3>Comments</h3>
  <div class="storage-info">
    <span class="storage-notice">üíæ Comments stored locally</span>
    <button id="storage-info-btn" class="info-btn" title="Learn about comment storage">‚ÑπÔ∏è</button>
  </div>
</div>
  
  <!-- Login Section -->
  <div id="login-section" class="login-section">
    <h4>Sign in to leave a comment</h4>
    
    <!-- Google Sign In Button -->
    <div id="google-signin-container" class="google-signin-centered">
      <div id="g_id_onload"
           data-client_id={GOOGLE_CONFIG.CLIENT_ID}
           data-context="signin"
           data-ux_mode="popup"
           data-callback="handleCredentialResponse"
           data-auto_prompt="false"
           style={GOOGLE_CONFIG.ENABLED ? 'display: block;' : 'display: none;'}>
      </div>
      
      <div class="g_id_signin"
           data-type="standard"
           data-shape="rectangular"
           data-theme="outline"
           data-text="signin_with"
           data-size="large"
           data-logo_alignment="left"
           style={GOOGLE_CONFIG.ENABLED ? 'display: block;' : 'display: none;'}>
      </div>
      
      <!-- Fallback custom button for development -->
      <button id="custom-google-signin" class="google-signin-btn" style={GOOGLE_CONFIG.ENABLED ? 'display: none;' : 'display: flex;'}>
        <svg width="18" height="18" viewBox="0 0 48 48">
          <path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"/>
          <path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"/>
          <path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"/>
          <path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"/>
        </svg>
        Sign in with Google
      </button>
    </div>
    

  </div>



  <!-- User Info Section (hidden initially) -->
  <div id="user-section" class="user-section" style="display: none;">
    <div class="user-info">
      <div class="user-details">
        <span id="user-name"></span>
        <button id="logout-btn" class="logout-btn">Sign Out</button>
      </div>
    </div>
  </div>

  <!-- Comment Form (hidden initially) -->
  <div id="comment-form-section" class="comment-form-section" style="display: none;">
    <form id="comment-form" class="comment-form">
      <textarea 
        id="comment-text" 
        placeholder="Write your comment..." 
        rows="4" 
        required
      ></textarea>
      <div class="form-actions">
        <button type="submit" class="submit-comment-btn">Post Comment</button>
        <button type="button" id="cancel-comment-btn" class="cancel-comment-btn">Cancel</button>
      </div>
    </form>
  </div>

  <!-- Comments List -->
  <div id="comments-list" class="comments-list">
    <!-- Comments will be loaded here -->
  </div>

  <!-- Add Comment Button (for logged in users) -->
  <button id="add-comment-btn" class="add-comment-btn" style="display: none;">
    Add a Comment
  </button>
</div>

<style>
  /* AGGRESSIVE DEPLOY: 2025-01-25 22:17 - INFINITE NESTED REPLIES DEPLOY NOW! */
  .comments-section {
    margin-top: 3rem;
    padding: 2rem;
    background: #f8f9fa;
    border-radius: 10px;
    border: 1px solid #e9ecef;
  }

  .comments-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .comments-section h3 {
    margin: 0;
    color: #333;
    font-size: 1.5rem;
    font-weight: 600;
  }

  .storage-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .storage-notice {
    font-size: 0.875rem;
    color: #6c757d;
    background: #f8f9fa;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    border: 1px solid #dee2e6;
  }

  .info-btn {
    background: #4285f4;
    color: white;
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    cursor: pointer;
    font-size: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .info-btn:hover {
    background: #3367d6;
    transform: scale(1.1);
  }

  /* Login Section */
  .login-section {
    padding: 2rem;
    background: white;
    border-radius: 8px;
    border: 1px solid #dee2e6;
    text-align: left;
  }

  .login-section h4 {
    margin-bottom: 1.5rem;
    color: #333;
    text-align: center;
    font-size: 1.2rem;
  }

  .login-form {
    max-width: 300px;
    margin: 0 auto;
  }

  .google-signin-btn {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    padding: 12px 16px;
    background: #4285f4;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .google-signin-btn:hover {
    background: #3367d6;
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    transform: translateY(-1px);
  }

  .google-signin-btn:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .google-signin-centered {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    margin: 1rem 0 2rem 0;
  }

  .google-signin-centered .g_id_signin {
    margin: 0 auto;
  }

  .auth-divider {
    text-align: center;
    margin: 1.5rem 0;
    position: relative;
  }

  .auth-divider::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background: #e9ecef;
  }

  .auth-divider span {
    background: white;
    padding: 0 1rem;
    color: #666;
    font-size: 0.9rem;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #333;
    font-weight: 500;
    font-size: 0.9rem;
  }

  .form-group input {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid #e9ecef;
    border-radius: 6px;
    font-size: 1rem;
    font-family: inherit;
    box-sizing: border-box;
    transition: border-color 0.3s ease;
  }

  .form-group input:focus {
    outline: none;
    border-color: #4285f4;
    box-shadow: 0 0 0 3px rgba(66, 133, 244, 0.1);
  }

  .login-btn {
    width: 100%;
    padding: 0.75rem;
    background: #4285f4;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
    margin-bottom: 1rem;
  }

  .login-btn:hover {
    background: #3367d6;
  }

  .auth-toggle {
    text-align: center;
  }

  .auth-toggle p {
    margin: 0;
    color: #666;
    font-size: 0.9rem;
  }

  .link-btn {
    background: none;
    border: none;
    color: #4285f4;
    text-decoration: underline;
    cursor: pointer;
    font-size: inherit;
    padding: 0;
  }

  .link-btn:hover {
    color: #3367d6;
  }

  .auth-error {
    color: #dc3545;
    font-size: 0.85rem;
    margin-top: 0.5rem;
    text-align: center;
  }

  /* User Section */
  .user-section {
    margin-bottom: 1.5rem;
  }

  .user-info {
    padding: 1rem;
    background: white;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  .user-details {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .logout-btn {
    padding: 0.4rem 0.8rem;
    background: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 0.85rem;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .logout-btn:hover {
    background: #c82333;
  }

  /* Comment Form */
  .comment-form-section {
    margin-bottom: 2rem;
  }

  .comment-form {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  .comment-form textarea {
    width: 100%;
    border: 2px solid #e9ecef;
    border-radius: 6px;
    padding: 0.75rem;
    font-size: 1rem;
    font-family: inherit;
    resize: vertical;
    min-height: 100px;
    box-sizing: border-box;
  }

  .comment-form textarea:focus {
    outline: none;
    border-color: #4285f4;
    box-shadow: 0 0 0 3px rgba(66, 133, 244, 0.1);
  }

  .form-actions {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .submit-comment-btn {
    padding: 0.75rem 1.5rem;
    background: #4285f4;
    color: white;
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .submit-comment-btn:hover {
    background: #3367d6;
  }

  .cancel-comment-btn {
    padding: 0.75rem 1.5rem;
    background: #6c757d;
    color: white;
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .cancel-comment-btn:hover {
    background: #5a6268;
  }

  /* Add Comment Button */
  .add-comment-btn {
    width: 100%;
    padding: 1rem;
    background: #4285f4;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
    margin-bottom: 2rem;
  }

  .add-comment-btn:hover {
    background: #3367d6;
  }

  /* Comments List */
  .comments-list {
    space-y: 1rem;
  }

  .comment-item {
    background: white;
    padding: 1.25rem;
    border-radius: 12px;
    border: none;
    margin-bottom: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
  }

  .comment-item:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .comment-body {
    width: 100%;
  }

  .comment-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
  }

  .comment-author-section {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .comment-author-avatar {
    width: 18px;
    height: 18px;
    border-radius: 50%;
    object-fit: cover;
    border: 1px solid #e5e7eb;
    background: #f3f4f6;
    flex-shrink: 0;
  }

  .comment-author-avatar.small {
    width: 16px;
    height: 16px;
  }

  /* Specific class for header avatars with higher specificity */
  .comment-header-avatar {
    width: 16px !important;
    height: 16px !important;
    border-radius: 50% !important;
    object-fit: cover !important;
    border: 1px solid #e5e7eb !important;
    background: #f3f4f6 !important;
    flex-shrink: 0 !important;
    max-width: 16px !important;
    max-height: 16px !important;
  }

  .comment-header-avatar.small {
    width: 14px !important;
    height: 14px !important;
    max-width: 14px !important;
    max-height: 14px !important;
  }

  /* Force override any other styles */
  .comment-author-section img {
    width: 16px !important;
    height: 16px !important;
    max-width: 16px !important;
    max-height: 16px !important;
    border-radius: 50% !important;
    object-fit: cover !important;
  }

  .comment-author-section img.small {
    width: 14px !important;
    height: 14px !important;
    max-width: 14px !important;
    max-height: 14px !important;
  }

  .comment-author {
    font-weight: 600;
    color: #333;
    font-size: 0.9rem;
  }

  .comment-main {
    /* Main comment styling */
  }

  .comment-thread {
    /* Container for main comment + its replies */
  }

  .comment-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
  }

  .comment-author {
    font-weight: 600;
    color: #333;
  }

  .comment-date {
    color: #6c757d;
    font-size: 0.9rem;
  }

  .comment-content {
    color: #495057;
    line-height: 1.5;
    white-space: pre-wrap;
    margin-bottom: 0.75rem;
  }

  .comment-actions {
    display: flex;
    gap: 0.5rem;
  }

  .reply-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.4rem;
    padding: 0.5rem 0.9rem;
    background: rgba(255, 255, 255, 0.1);
    color: #9ca3af;
    border: none;
    border-radius: 20px;
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
    backdrop-filter: blur(10px);
    box-shadow: none;
  }

  .reply-btn:hover {
    background: rgba(255, 255, 255, 0.15);
    color: #e5e7eb;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }

  .reply-btn svg {
    transition: all 0.3s ease;
  }

  .reply-btn:hover svg {
    transform: translateX(-2px) scale(1.1);
  }

  .replies-container {
    margin-left: 50px !important;
    margin-top: 1rem !important;
    margin-bottom: 1rem !important;
    border-left: 4px solid #4285f4 !important;
    padding-left: 25px !important;
    position: relative !important;
    background: rgba(66, 133, 244, 0.02) !important;
    padding-top: 0.5rem !important;
    padding-bottom: 0.5rem !important;
    display: block !important;
    box-sizing: border-box !important;
    border-radius: 0 8px 8px 0 !important;
  }

  .replies-container::before {
    content: '';
    position: absolute;
    left: -3px;
    top: 0;
    bottom: 0;
    width: 3px;
    background: linear-gradient(to bottom, #4285f4, #34a853);
    border-radius: 2px;
  }

  .reply-item {
    background: rgba(255, 255, 255, 0.05);
    padding: 1rem;
    border-radius: 12px;
    margin-bottom: 0.75rem;
    border: none;
    position: relative;
    transition: all 0.2s ease;
    backdrop-filter: blur(10px);
    margin-left: 0;
    box-shadow: none;
  }

  .reply-item:hover {
    background: rgba(255, 255, 255, 0.08);
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .reply-body {
    width: 100%;
  }

  .reply-item::before {
    content: "‚Ü≥";
    position: absolute;
    left: -35px;
    top: 12px;
    color: #6b7280;
    font-weight: 500;
    font-size: 16px;
    z-index: 1;
    opacity: 0.7;
  }

  .reply-form {
    margin-top: 1rem;
    padding: 1.2rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 16px;
    border: none;
    backdrop-filter: blur(10px);
    box-shadow: none;
    transition: all 0.3s ease;
  }

  .reply-form:hover {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .reply-form textarea {
    width: 100%;
    border: none;
    border-radius: 12px;
    padding: 1rem;
    font-size: 0.95rem;
    font-family: inherit;
    resize: vertical;
    min-height: 90px;
    box-sizing: border-box;
    background: rgba(255, 255, 255, 0.08);
    color: #e5e7eb;
    transition: all 0.3s ease;
    line-height: 1.5;
  }

  .reply-form textarea:focus {
    outline: none;
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.1);
    background: rgba(255, 255, 255, 0.12);
    transform: scale(1.005);
  }

  .reply-actions {
    display: flex;
    gap: 0.5rem;
    margin-top: 0.75rem;
  }

  .submit-reply-btn {
    padding: 0.75rem 1.5rem;
    background: #4285f4;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .submit-reply-btn:hover {
    background: #3367d6;
  }

  .cancel-reply-btn {
    padding: 0.75rem 1.5rem;
    background: #6c757d;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .cancel-reply-btn:hover {
    background: #5a6268;
  }

  .no-comments {
    text-align: center;
    color: #6c757d;
    padding: 2rem;
    background: white;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  /* Dark Mode */
  html.dark .comments-section {
    background: #2d3748;
    border-color: #4a5568;
  }

  html.dark .comments-section h3 {
    color: #e2e8f0;
  }

  html.dark .login-section,
  html.dark .user-info,
  html.dark .comment-form,
  html.dark .comment-item,
  html.dark .no-comments {
    background: #1a202c;
    border: none !important;
  }

  /* Force remove all borders in dark mode */
  html.dark .comment-item,
  html.dark .comment-item:hover,
  html.dark .reply-item,
  html.dark .reply-item:hover,
  html.dark .reply-form,
  html.dark .reply-form:hover,
  html.dark .comment-form,
  html.dark .comment-form:hover {
    border: none !important;
    border-color: transparent !important;
    border-width: 0 !important;
  }

  html.dark .login-section h4,
  html.dark .form-group label {
    color: #e2e8f0;
  }

  html.dark .form-group input {
    background: #2d3748;
    border-color: #4a5568;
    color: #e2e8f0;
  }

  html.dark .form-group input:focus {
    border-color: #4285f4;
  }

  html.dark .login-section p,
  html.dark .comment-date,
  html.dark .no-comments {
    color: #a0aec0;
  }

  html.dark .comment-author,
  html.dark .comment-content {
    color: #e2e8f0;
  }

  html.dark .comment-form textarea,
  html.dark .reply-form textarea {
    background: #2d3748;
    border: none !important;
    color: #e2e8f0;
  }

  html.dark .comment-form textarea:focus,
  html.dark .reply-form textarea:focus {
    border: none !important;
    border-color: transparent !important;
    border-width: 0 !important;
    box-shadow: 0 0 0 2px rgba(66, 133, 244, 0.3);
  }

  html.dark .reply-item {
    background: #2d3748;
    border: none !important;
  }

  html.dark .reply-form {
    background: #2d3748;
    border: none !important;
  }

  html.dark .replies-container {
    border-left-color: #4285f4;
  }

  html.dark .auth-divider span {
    background: #1a202c;
    color: #a0aec0;
  }

  html.dark .auth-divider::before {
    background: #4a5568;
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .comments-section {
      padding: 1.5rem;
      margin-top: 2rem;
    }

    .user-details {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .form-actions,
    .reply-actions {
      flex-direction: column;
    }

    .submit-comment-btn,
    .cancel-comment-btn,
    .submit-reply-btn,
    .cancel-reply-btn {
      width: 100%;
    }

    .replies-container {
      margin-left: 20px;
      padding-left: 15px;
    }

    .reply-item::before {
      left: -10px;
    }

    .comment-actions {
      flex-wrap: wrap;
    }
  }
  /* Reply Form Header */
  .reply-form-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
    padding: 0.75rem;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #e9ecef;
  }

  .reply-avatar {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    object-fit: cover;
    border: 1px solid #dee2e6;
  }

  .reply-as {
    font-size: 0.875rem;
    color: #666;
    font-weight: 500;
  }

  /* Enhanced No Comments Message */
  .no-comments {
    text-align: center;
    color: #6c757d;
    font-style: italic;
    padding: 3rem 2rem;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-radius: 12px;
    border: 2px dashed #dee2e6;
    font-size: 1.1rem;
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .comment-item {
      padding: 1rem;
    }
    
    .comment-author-avatar,
    .comment-header-avatar {
      width: 14px !important;
      height: 14px !important;
      max-width: 14px !important;
      max-height: 14px !important;
    }
    
    .comment-author-avatar.small,
    .comment-header-avatar.small {
      width: 12px !important;
      height: 12px !important;
      max-width: 12px !important;
      max-height: 12px !important;
    }
    
    .comment-author {
      font-size: 0.85rem;
    }
    
    .reply-form-header {
      padding: 0.5rem;
    }
    
    .reply-avatar {
      width: 12px;
      height: 12px;
    }

    .replies-container {
      margin-left: 15px !important;
      padding-left: 10px !important;
    }

    .reply-item::before {
      left: -20px !important;
      font-size: 12px !important;
    }

    .reply-form {
      padding: 0.75rem !important;
    }

    .reply-form textarea {
      padding: 0.5rem !important;
      min-height: 70px !important;
      font-size: 0.9rem !important;
    }

    .reply-btn {
      padding: 0.4rem 0.7rem !important;
      font-size: 0.8rem !important;
    }
  }

  @media (max-width: 480px) {
    .comment-author-avatar,
    .comment-header-avatar {
      width: 12px !important;
      height: 12px !important;
      max-width: 12px !important;
      max-height: 12px !important;
    }
    
    .comment-author-avatar.small,
    .comment-header-avatar.small {
      width: 10px !important;
      height: 10px !important;
      max-width: 10px !important;
      max-height: 10px !important;
    }
    
    .comment-author {
      font-size: 0.8rem;
    }
  }

  /* AGGRESSIVE BORDER REMOVAL FOR DARK MODE - HIGHEST PRIORITY */
  html.dark .comments-section .comment-item,
  html.dark .comments-section .reply-item,
  html.dark .comments-section .reply-form,
  html.dark .comments-section .comment-form,
  html.dark .comments-section textarea,
  html.dark .comments-section .reply-btn {
    border: none !important;
    border-color: transparent !important;
    border-width: 0px !important;
    border-style: none !important;
  }

  /* Fix Google sign-in button in dark mode */
  html.dark .google-signin-btn {
    background: #4285f4 !important;
    color: white !important;
    border: none !important;
  }

  html.dark .google-signin-btn:hover {
    background: #3367d6 !important;
    color: white !important;
  }

  /* Ensure login section text is readable in dark mode */
  html.dark .login-section h4 {
    color: #e2e8f0 !important;
  }
</style>

<!-- Google Identity Services -->
<script src="https://accounts.google.com/gsi/client" async defer></script>

<script>
  // Global function for infinite nested replies (must be outside DOMContentLoaded)
  function renderReplies(replies: any[], depth = 0, currentUser: any): string {
    if (!replies || replies.length === 0) return '';
    
    const marginLeft = Math.max(20, 50 - (depth * 6));
    const paddingLeft = Math.max(10, 25 - (depth * 2));
    const borderWidth = Math.max(1, 4 - depth);
    const bgOpacity = Math.max(0.005, 0.02 - depth * 0.003);
    
    const borderColors = [
      'rgba(156, 163, 175, 0.4)', // Level 0 - Gray
      'rgba(59, 130, 246, 0.4)',  // Level 1 - Blue  
      'rgba(16, 185, 129, 0.4)',  // Level 2 - Green
      'rgba(245, 101, 101, 0.4)', // Level 3 - Red
      'rgba(139, 92, 246, 0.4)',  // Level 4 - Purple
      'rgba(245, 158, 11, 0.4)'   // Level 5+ - Orange
    ];
    const borderColor = borderColors[Math.min(depth, borderColors.length - 1)];
    
    function formatDate(dateString: any) {
      const date = new Date(dateString);
      return date.toLocaleDateString() + ' at ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    }
    
    return `
      <div class="replies-container" style="margin-left: ${marginLeft}px !important; background: rgba(255, 255, 255, ${bgOpacity}) !important; border-left: ${borderWidth}px solid ${borderColor} !important; padding: ${paddingLeft}px !important; border-radius: 0 ${Math.max(6, 12 - depth)}px ${Math.max(6, 12 - depth)}px 0 !important;">
        ${replies.map((reply: any) => `
          <div class="reply-item">
            <div class="reply-body">
              <div class="comment-header">
                <div class="comment-author-section">
                  <img src="${reply.userPicture && reply.userPicture !== 'undefined' ? reply.userPicture : `https://ui-avatars.com/api/?name=${encodeURIComponent(reply.author)}&background=4285f4&color=fff&size=14`}" 
                       alt="${reply.author}" 
                       class="comment-header-avatar small"
                       style="width: 14px !important; height: 14px !important; border-radius: 50%; object-fit: cover;"
                       onerror="this.src='https://ui-avatars.com/api/?name=${encodeURIComponent(reply.author)}&background=4285f4&color=fff&size=14'" />
                  <span class="comment-author">${reply.author}</span>
                </div>
                <span class="comment-date">${formatDate(reply.date)}</span>
              </div>
              <div class="comment-content">${reply.content}</div>
              <div class="comment-actions" style="margin-top: 0.75rem;">
                ${currentUser ? `<button class="reply-btn" onclick="showReplyForm('${reply.id}')">
                  <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z"/>
                  </svg>
                  Reply
                </button>` : ''}
              </div>
              <div id="reply-form-${reply.id}" class="reply-form" style="display: none;">
                <div class="reply-form-header">
                  <img src="${currentUser?.picture || `https://ui-avatars.com/api/?name=${encodeURIComponent(currentUser?.name || 'User')}&background=4285f4&color=fff&size=32`}" 
                       alt="${currentUser?.name || 'User'}" 
                       class="reply-avatar" />
                  <span class="reply-as">Replying to ${reply.author}</span>
                </div>
                <textarea placeholder="Write a thoughtful reply..." rows="3"></textarea>
                <div class="reply-actions">
                  <button class="submit-reply-btn" onclick="submitReply('${reply.id}')">Post Reply</button>
                  <button class="cancel-reply-btn" onclick="hideReplyForm('${reply.id}')">Cancel</button>
                </div>
              </div>
            </div>
            ${renderReplies(reply.replies, depth + 1, currentUser)}
          </div>
        `).join('')}
      </div>
    `;
  }

  document.addEventListener('DOMContentLoaded', function() {
    const postSlug = document.querySelector('.comments-section')?.getAttribute('data-post-slug') || 'unknown';
    
    // Mock user data (in real implementation, this would come from Google OAuth)
    let currentUser: any = null;
    
    // DOM elements
    const loginSection = document.getElementById('login-section');
    const registerSection = document.getElementById('register-section');
    const userSection = document.getElementById('user-section');
    const commentFormSection = document.getElementById('comment-form-section');
    const commentsList = document.getElementById('comments-list');
    const addCommentBtn = document.getElementById('add-comment-btn');
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    const googleSigninBtn = document.getElementById('google-signin-btn');
    const logoutBtn = document.getElementById('logout-btn');
    const commentForm = document.getElementById('comment-form');
    const cancelCommentBtn = document.getElementById('cancel-comment-btn');
    const showRegisterBtn = document.getElementById('show-register');
    const showLoginBtn = document.getElementById('show-login');
    
    // Simple, clean initialization - no special logout handling needed
    
    // Check if user is already logged in
    checkLoginStatus();
    
    // Load comments for this post
    loadComments();
    
    // Initialize Google OAuth after a delay to ensure API is loaded
    setTimeout(() => {
      initializeGoogleOAuth();
    }, 1500);

    // Handle storage info button
    const storageInfoBtn = document.getElementById('storage-info-btn');
    if (storageInfoBtn) {
      storageInfoBtn.addEventListener('click', showStorageInfoModal);
    }
    
    // Event listeners
    if (loginForm) {
      loginForm.addEventListener('submit', handleLogin);
    }
    
    if (registerForm) {
      registerForm.addEventListener('submit', handleRegister);
    }
    
    if (googleSigninBtn) {
      googleSigninBtn.addEventListener('click', handleCustomGoogleSignIn);
      console.log('Development Google Sign-In button activated (fallback mode)');
    }
    
    if (showRegisterBtn) {
      showRegisterBtn.addEventListener('click', showRegisterForm);
    }
    
    if (showLoginBtn) {
      showLoginBtn.addEventListener('click', showLoginForm);
    }
    
    if (logoutBtn) {
      logoutBtn.addEventListener('click', handleLogout);
    }
    
    if (addCommentBtn) {
      addCommentBtn.addEventListener('click', showCommentForm);
    }
    
    if (cancelCommentBtn) {
      cancelCommentBtn.addEventListener('click', hideCommentForm);
    }
    
    if (commentForm) {
      commentForm.addEventListener('submit', handleCommentSubmit);
    }
    
    function checkLoginStatus() {
      console.log('=== CHECKING LOGIN STATUS ===');
      const userData = localStorage.getItem('blog-user');
      console.log('userData from localStorage:', userData);
      
      if (userData) {
        try {
          currentUser = JSON.parse(userData);
          console.log('‚úÖ Restored user from localStorage:', currentUser);
          console.log('Calling showLoggedInState()...');
          showLoggedInState();
          console.log('Calling showCommentForm()...');
          showCommentForm();
        } catch (error) {
          console.error('‚ùå Error parsing user data:', error);
          localStorage.removeItem('blog-user');
          showLoggedOutState();
        }
      } else {
        console.log('‚ùå No user data found, showing logged out state');
        showLoggedOutState();
      }
      console.log('=== LOGIN STATUS CHECK COMPLETE ===');
    }
    
    // Real Google OAuth callback function
    function handleCredentialResponse(response: any) {
      console.log('=== GOOGLE SIGN-IN CALLBACK ===');
      console.log('Response received:', response);
      
      try {
        // Decode the JWT token to get user info
        const payload = JSON.parse(atob(response.credential.split('.')[1]));
        console.log('Decoded payload:', payload);
        
        const user = {
          id: 'google_' + payload.sub,
          name: payload.name,
          email: payload.email,
          picture: payload.picture || `https://ui-avatars.com/api/?name=${encodeURIComponent(payload.name)}&background=4285f4&color=fff&size=40`,
          provider: 'google'
        };
        
        console.log('Created user object:', user);
        
        currentUser = user;
        localStorage.setItem('blog-user', JSON.stringify(currentUser));
        console.log('‚úÖ User saved to localStorage');
        
        // Clear any previous error states
        const errorMessages = document.querySelectorAll('.error-message');
        errorMessages.forEach(msg => msg.remove());
        
        // Immediately show logged in state and comment form
        console.log('Calling showLoggedInState()...');
        showLoggedInState();
        console.log('Calling showCommentForm()...');
        showCommentForm();
        
        // Also reload comments to ensure reply buttons appear
        console.log('Reloading comments...');
        loadComments();
        
        console.log('‚úÖ User logged in successfully:', user);
        
        // Ensure the Google sign-in widget is hidden after successful login
        setTimeout(() => {
          const googleContainer = document.getElementById('google-signin-container');
          if (googleContainer) {
            googleContainer.style.display = 'none';
            console.log('Google container hidden');
          }
        }, 500);
        
        console.log('Google Sign-In successful:', user);
        console.log('Profile picture URL:', payload.picture);
      } catch (error) {
        console.error('Error processing Google Sign-In:', error);
                           console.error('Failed to sign in with Google. Please try again.');
      }
    }
    
    // Make handleCredentialResponse available globally
    (window as any).handleCredentialResponse = handleCredentialResponse;
    
    // Fallback custom Google sign-in for development
    function handleCustomGoogleSignIn() {
      // This is a fallback for development when Google Client ID is not configured
      const modal = createGmailModal();
      document.body.appendChild(modal);
    }
    
    function createGmailModal() {
      const modal = document.createElement('div');
      modal.innerHTML = `
        <div class="gmail-modal-overlay">
          <div class="gmail-modal">
            <div class="gmail-modal-header">
              <h3>Development Mode - Gmail Simulation</h3>
              <button class="gmail-modal-close">&times;</button>
            </div>
            <div class="gmail-modal-body">
              <p style="color: #666; margin-bottom: 15px; font-size: 14px;">
                This is a development simulation. In production, you'll use real Google OAuth.
              </p>
              <div class="gmail-form-group">
                <label>Gmail Address</label>
                <input type="email" id="gmail-email" placeholder="yourname@gmail.com" />
              </div>
              <div class="gmail-form-group">
                <label>Your Name</label>
                <input type="text" id="gmail-name" placeholder="Enter your name" />
              </div>
              <div class="gmail-error" style="display: none;"></div>
              <button class="gmail-submit-btn">Sign In (Development)</button>
            </div>
          </div>
        </div>
      `;
      
      // Add styles (same as before but simplified)
      const style = document.createElement('style');
      style.textContent = `
        .gmail-modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          background: rgba(0,0,0,0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 10000;
        }
        .gmail-modal {
          background: white;
          border-radius: 8px;
          width: 400px;
          max-width: 90vw;
          box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }
        .gmail-modal-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 20px;
          border-bottom: 1px solid #e9ecef;
        }
        .gmail-modal-header h3 {
          margin: 0;
          color: #333;
          font-size: 16px;
        }
        .gmail-modal-close {
          background: none;
          border: none;
          font-size: 24px;
          cursor: pointer;
          color: #666;
        }
        .gmail-modal-body {
          padding: 20px;
        }
        .gmail-form-group {
          margin-bottom: 15px;
        }
        .gmail-form-group label {
          display: block;
          margin-bottom: 5px;
          font-weight: 500;
          color: #333;
        }
        .gmail-form-group input {
          width: 100%;
          padding: 12px;
          border: 2px solid #e9ecef;
          border-radius: 6px;
          font-size: 16px;
          box-sizing: border-box;
        }
        .gmail-form-group input:focus {
          outline: none;
          border-color: #4285f4;
        }
        .gmail-error {
          color: #dc3545;
          font-size: 14px;
          margin-bottom: 15px;
          padding: 10px;
          background: #f8d7da;
          border-radius: 4px;
        }
        .gmail-submit-btn {
          width: 100%;
          padding: 12px;
          background: #4285f4;
          color: white;
          border: none;
          border-radius: 6px;
          font-size: 16px;
          font-weight: 500;
          cursor: pointer;
        }
        .gmail-submit-btn:hover {
          background: #3367d6;
        }
      `;
      modal.appendChild(style);
      
      // Add event listeners
      const closeBtn = modal.querySelector('.gmail-modal-close');
      const submitBtn = modal.querySelector('.gmail-submit-btn');
      const overlay = modal.querySelector('.gmail-modal-overlay');
      
      closeBtn?.addEventListener('click', () => modal.remove());
      overlay?.addEventListener('click', (e) => {
        if (e.target === overlay) modal.remove();
      });
      
      submitBtn?.addEventListener('click', () => {
        const email = (modal.querySelector('#gmail-email') as HTMLInputElement)?.value.trim().toLowerCase();
        const name = (modal.querySelector('#gmail-name') as HTMLInputElement)?.value.trim();
        const errorDiv = modal.querySelector('.gmail-error') as HTMLElement;
        
        if (!email || !name) {
          showGmailError(errorDiv, 'Please fill in all fields');
          return;
        }
        
        if (!email.endsWith('@gmail.com')) {
          showGmailError(errorDiv, 'Please enter a valid Gmail address (must end with @gmail.com)');
          return;
        }
        
        const user = {
          id: 'gmail_dev_' + Date.now(),
          name: name,
          email: email,
          provider: 'gmail'
        };
        
        currentUser = user;
        localStorage.setItem('blog-user', JSON.stringify(currentUser));
        showLoggedInState();
        modal.remove();
      });
      
      return modal;
    }
    
    function showGmailError(errorDiv: HTMLElement, message: string) {
      errorDiv.textContent = message;
      errorDiv.style.display = 'block';
      setTimeout(() => {
        errorDiv.style.display = 'none';
      }, 5000);
    }
    
    function showRegisterForm() {
      if (loginSection) loginSection.style.display = 'none';
      if (registerSection) registerSection.style.display = 'block';
    }
    
    function showLoginForm() {
      if (registerSection) registerSection.style.display = 'none';
      if (loginSection) loginSection.style.display = 'block';
    }
    
    function handleRegister(e: any) {
      e.preventDefault();
      
      const name = (document.getElementById('register-name') as HTMLInputElement)?.value.trim();
      const email = (document.getElementById('register-email') as HTMLInputElement)?.value.trim().toLowerCase();
      const password = (document.getElementById('register-password') as HTMLInputElement)?.value;
      
      if (!name || !email || !password) {
        showError('register-form', 'Please fill in all fields');
        return;
      }
      
      if (!email.includes('@')) {
        showError('register-form', 'Please enter a valid email address');
        return;
      }
      
      if (password.length < 6) {
        showError('register-form', 'Password must be at least 6 characters');
        return;
      }
      
      // Check if user already exists
      const existingUsers = JSON.parse(localStorage.getItem('blog-users') || '{}');
      if (existingUsers[email]) {
        showError('register-form', 'An account with this email already exists');
        return;
      }
      
      // Create new user
      const user = {
        id: 'user_' + Date.now(),
        name: name,
        email: email,
        password: password // In real app, this would be hashed
      };
      
      // Save to users database
      existingUsers[email] = user;
      localStorage.setItem('blog-users', JSON.stringify(existingUsers));
      
      // Log user in
      currentUser = user;
      localStorage.setItem('blog-user', JSON.stringify(currentUser));
      showLoggedInState();
    }
    
    function handleLogin(e: any) {
      e.preventDefault();
      
      const email = (document.getElementById('login-email') as HTMLInputElement)?.value.trim().toLowerCase();
      const password = (document.getElementById('login-password') as HTMLInputElement)?.value;
      
      if (!email || !password) {
        showError('login-form', 'Please fill in all fields');
        return;
      }
      
      // Check if user exists
      const existingUsers = JSON.parse(localStorage.getItem('blog-users') || '{}');
      const user = existingUsers[email];
      
      if (!user) {
        showError('login-form', 'No account found with this email');
        return;
      }
      
      if (user.password !== password) {
        showError('login-form', 'Incorrect password');
        return;
      }
      
      // Log user in
      currentUser = user;
      localStorage.setItem('blog-user', JSON.stringify(currentUser));
      showLoggedInState();
    }
    
    function showError(formId: string, message: string) {
      const form = document.getElementById(formId);
      if (!form) return;
      
      // Remove existing error
      const existingError = form.querySelector('.auth-error');
      if (existingError) existingError.remove();
      
      // Add new error
      const errorDiv = document.createElement('div');
      errorDiv.className = 'auth-error';
      errorDiv.textContent = message;
      form.appendChild(errorDiv);
      
      // Remove error after 5 seconds
      setTimeout(() => {
        if (errorDiv.parentNode) errorDiv.remove();
      }, 5000);
    }
    
    function showLoggedInState() {
      if (!currentUser) {
        console.error('showLoggedInState called but no currentUser');
        return;
      }
      
      console.log('showLoggedInState called with user:', currentUser);
      
      if (loginSection) {
        loginSection.style.display = 'none';
        console.log('Login section hidden');
      } else {
        console.error('loginSection not found');
      }
      
      if (registerSection) registerSection.style.display = 'none';
      if (userSection) {
        userSection.style.display = 'block';
        console.log('User section shown');
      } else {
        console.error('userSection not found');
      }
      
      if (addCommentBtn) {
        addCommentBtn.style.display = 'block';
        console.log('Add comment button shown');
      } else {
        console.error('addCommentBtn not found');
      }
      
      // Update user info
      const userName = document.getElementById('user-name');
      if (userName) {
        userName.textContent = currentUser.name;
        console.log('User name updated to:', currentUser.name);
      } else {
        console.error('userName element not found');
      }
      
      // Automatically show comment form for better UX
      setTimeout(() => {
        showCommentForm();
      }, 200);
    }
    
    function showLoggedOutState() {
      console.log('=== SHOWING LOGGED OUT STATE ===');
      
      if (loginSection) {
        loginSection.style.display = 'block';
        console.log('‚úÖ Login section shown');
      }
      if (registerSection) registerSection.style.display = 'none';
      if (userSection) {
        userSection.style.display = 'none';
        console.log('‚úÖ User section hidden');
      }
      if (addCommentBtn) addCommentBtn.style.display = 'none';
      
      // Show Google sign-in container
      const googleContainer = document.getElementById('google-signin-container');
      if (googleContainer) {
        googleContainer.style.display = 'flex';
        console.log('‚úÖ Google sign-in container shown');
      }
      
      // Reload comments to hide reply buttons
      console.log('Reloading comments for logged out state...');
      loadComments();
      
      console.log('=== LOGGED OUT STATE COMPLETE ===');
    }
    
    function showCommentForm() {
      console.log('showCommentForm called');
      console.log('commentFormSection:', commentFormSection);
      console.log('currentUser:', currentUser);
      
      if (commentFormSection) {
        commentFormSection.style.display = 'block';
        console.log('Comment form section display set to block');
        
        const textarea = document.getElementById('comment-text');
        if (textarea) {
          textarea.focus();
          console.log('Textarea focused');
        } else {
          console.error('Textarea with id "comment-text" not found');
        }
        console.log('Comment form shown successfully');
      } else {
        console.log('commentFormSection not found');
      }
      if (addCommentBtn) addCommentBtn.style.display = 'none';
    }
    
    function hideCommentForm() {
      if (commentFormSection) commentFormSection.style.display = 'none';
      if (addCommentBtn && currentUser) addCommentBtn.style.display = 'block';
      
      const textarea = document.getElementById('comment-text') as HTMLTextAreaElement;
      if (textarea) textarea.value = '';
    }
    
    function handleCommentSubmit(e: any) {
      e.preventDefault();
      
      if (!currentUser) return;
      
      const textarea = document.getElementById('comment-text') as HTMLTextAreaElement;
      const commentText = textarea?.value.trim();
      
      if (!commentText) return;
      
      const comment = {
        id: 'comment_' + Date.now(),
        postSlug: postSlug,
        author: currentUser.name,
        content: commentText,
        date: new Date().toISOString(),
        timestamp: Date.now(),
        userPicture: currentUser.picture,
        replies: []
      };
      
      saveComment(comment);
      loadComments();
      hideCommentForm();
    }
    
    function saveComment(comment: any) {
      const commentsKey = `comments_${postSlug}`;
      let comments = JSON.parse(localStorage.getItem(commentsKey) || '[]');
      comments.unshift(comment); // Add to beginning (newest first)
      localStorage.setItem(commentsKey, JSON.stringify(comments));
    }
    
    function loadComments() {
      const commentsKey = `comments_${postSlug}`;
      const comments = JSON.parse(localStorage.getItem(commentsKey) || '[]');
      
      if (!commentsList) return;
      
      if (comments.length === 0) {
        commentsList.innerHTML = '<div class="no-comments">üí¨ No comments yet. Be the first to share your thoughts!</div>';
        return;
      }
      
      commentsList.innerHTML = comments.map((comment: any) => {
        const repliesHtml = renderReplies(comment.replies, 0, currentUser);
        
                return `
          <div class="comment-thread">
            <div class="comment-item comment-main" data-comment-id="${comment.id}">
                <div class="comment-body">
                  <div class="comment-header">
                    <div class="comment-author-section">
                      <img src="${comment.userPicture && comment.userPicture !== 'undefined' ? comment.userPicture : `https://ui-avatars.com/api/?name=${encodeURIComponent(comment.author)}&background=4285f4&color=fff&size=16`}" 
                           alt="${comment.author}" 
                           class="comment-header-avatar"
                           style="width: 16px !important; height: 16px !important; max-width: 16px !important; max-height: 16px !important; border-radius: 50%; object-fit: cover; flex-shrink: 0;"
                           onerror="this.src='https://ui-avatars.com/api/?name=${encodeURIComponent(comment.author)}&background=4285f4&color=fff&size=16'" />
                      <span class="comment-author">${comment.author}</span>
                    </div>
                    <span class="comment-date">${formatDate(comment.date)}</span>
                  </div>
                  <div class="comment-content">${comment.content}</div>
                  <div class="comment-actions">
                    ${currentUser ? `<button class="reply-btn" onclick="showReplyForm('${comment.id}')">
                      <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z"/>
                      </svg>
                      Reply
                    </button>` : ''}
                  </div>
                  <div id="reply-form-${comment.id}" class="reply-form" style="display: none;">
                    <div class="reply-form-header">
                      <img src="${currentUser?.picture || `https://ui-avatars.com/api/?name=${encodeURIComponent(currentUser?.name || 'User')}&background=4285f4&color=fff&size=32`}" 
                           alt="${currentUser?.name || 'User'}" 
                           class="reply-avatar" />
                      <span class="reply-as">Replying as ${currentUser?.name || 'User'}</span>
                    </div>
                    <textarea placeholder="Write a thoughtful reply..." rows="3"></textarea>
                    <div class="reply-actions">
                      <button class="submit-reply-btn" onclick="submitReply('${comment.id}')">Post Reply</button>
                      <button class="cancel-reply-btn" onclick="hideReplyForm('${comment.id}')">Cancel</button>
                    </div>
                  </div>
                </div>
            </div>
          </div>
          ${repliesHtml}
        `;
      }).join('');
    }
    
    function formatDate(dateString: any) {
      const date = new Date(dateString);
      return date.toLocaleDateString() + ' at ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    }
    
    function resetGoogleOAuthCompletely() {
      console.log('=== COMPLETE GOOGLE OAUTH RESET ===');
      
      // Step 1: Remove all Google-related DOM elements
      const googleContainer = document.getElementById('google-signin-container');
      const gOnload = document.getElementById('g_id_onload');
      const gSignin = document.querySelector('.g_id_signin');
      const existingScripts = document.querySelectorAll('script[src*="accounts.google.com"]');
      
      console.log('üóëÔ∏è Removing all Google elements...');
      if (googleContainer) googleContainer.remove();
      if (gOnload) gOnload.remove();
      if (gSignin) gSignin.remove();
      existingScripts.forEach(script => script.remove());
      
      // Step 2: Completely clear Google globals and state
      if ((window as any).google) {
        delete (window as any).google;
        console.log('‚úÖ Deleted Google global object');
      }
      
      // Clear any Google-related window properties
      ['gapi', '__GOOGLEAPIS', '__G_SSO_IFRAME'].forEach(prop => {
        if ((window as any)[prop]) {
          delete (window as any)[prop];
        }
      });
      
      // Step 3: Recreate the entire Google OAuth structure from scratch
      setTimeout(() => {
        console.log('üî® Recreating Google OAuth structure...');
        recreateGoogleOAuth();
      }, 500);
    }
    
    function recreateGoogleOAuth() {
      console.log('=== RECREATING GOOGLE OAUTH FROM SCRATCH ===');
      
      // Recreate the login section HTML structure
      const loginSection = document.getElementById('login-section');
      if (loginSection) {
        const newGoogleContainer = document.createElement('div');
        newGoogleContainer.id = 'google-signin-container';
        newGoogleContainer.className = 'google-signin-centered';
        newGoogleContainer.style.display = 'flex';
        
        // Create g_id_onload div
        const gOnload = document.createElement('div');
        gOnload.id = 'g_id_onload';
        gOnload.setAttribute('data-client_id', '175048817524-o1dvmrsjvskvtth2vdno9dn28h3fkpjr.apps.googleusercontent.com');
        gOnload.setAttribute('data-context', 'signin');
        gOnload.setAttribute('data-ux_mode', 'popup');
        gOnload.setAttribute('data-callback', 'handleCredentialResponse');
        gOnload.setAttribute('data-auto_prompt', 'false');
        
        // Create g_id_signin div
        const gSignin = document.createElement('div');
        gSignin.className = 'g_id_signin';
        gSignin.setAttribute('data-type', 'standard');
        gSignin.setAttribute('data-shape', 'rectangular');
        gSignin.setAttribute('data-theme', 'outline');
        gSignin.setAttribute('data-text', 'signin_with');
        gSignin.setAttribute('data-size', 'large');
        gSignin.setAttribute('data-logo_alignment', 'left');
        
        newGoogleContainer.appendChild(gOnload);
        newGoogleContainer.appendChild(gSignin);
        loginSection.appendChild(newGoogleContainer);
        
        console.log('‚úÖ Recreated Google OAuth HTML structure');
        
        // Step 4: Load fresh Google script
        loadFreshGoogleScript();
      }
    }
    
    function loadFreshGoogleScript() {
      console.log('üì• Loading completely fresh Google script...');
      
      // Create script with maximum cache busting
      const script = document.createElement('script');
      script.src = `https://accounts.google.com/gsi/client?v=${Date.now()}&_cb=${Math.random()}`;
      script.async = true;
      script.defer = true;
      
      script.onload = () => {
        console.log('‚úÖ Fresh Google script loaded');
        setTimeout(() => {
          initializeGoogleOAuth();
        }, 1000);
      };
      
      script.onerror = () => {
        console.error('‚ùå Failed to load fresh Google script');
      };
      
      document.head.appendChild(script);
    }
    
    function handleLogout() {
      console.log('=== STARTING LOGOUT PROCESS ===');
      
      // Store current user for Google revoke
      const userEmail = currentUser?.email;
      console.log('User email for revoke:', userEmail);
      
      // Clear current user state
      currentUser = null;
      localStorage.removeItem('blog-user');
      localStorage.removeItem('blog-users');
      console.log('‚úÖ Cleared local storage');
      
      // Properly revoke Google OAuth access
      if (userEmail && (window as any).google?.accounts?.id) {
        console.log('Attempting to revoke Google access...');
        try {
          // Disable auto-select to prevent automatic re-login
          (window as any).google.accounts.id.disableAutoSelect();
          console.log('‚úÖ Disabled Google auto-select');
          
          // Revoke the user's access
          (window as any).google.accounts.id.revoke(userEmail, (response: any) => {
            console.log('Google revoke response:', response);
          });
          console.log('‚úÖ Revoked Google access');
        } catch (error) {
          console.error('‚ùå Error revoking Google access:', error);
        }
      }
      
      // Clear Google cookies
      const googleCookies = ['g_state', 'g_csrf_token'];
      googleCookies.forEach(cookie => {
        document.cookie = `${cookie}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        document.cookie = `${cookie}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${window.location.hostname};`;
        document.cookie = `${cookie}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=.${window.location.hostname};`;
      });
      console.log('‚úÖ Cleared Google cookies');
      
      // Show user feedback that logout is happening
      const userSection = document.getElementById('user-section');
      if (userSection) {
        userSection.innerHTML = '<div style="color: #666; font-style: italic; padding: 1rem;">Signing out...</div>';
      }
      
      console.log('üîÑ Performing hard refresh (Cmd+Shift+R equivalent)...');
      
      // Try the most direct approach - keyboard simulation
      setTimeout(() => {
        console.log('Attempting to simulate Cmd+Shift+R...');
        
        // Method 1: Try to trigger browser refresh via keyboard event
        try {
          const event = new KeyboardEvent('keydown', {
            key: 'r',
            code: 'KeyR',
            ctrlKey: true,
            shiftKey: true,
            metaKey: navigator.platform.indexOf('Mac') > -1, // Use Cmd on Mac, Ctrl on others
            bubbles: true,
            cancelable: true
          });
          document.dispatchEvent(event);
          console.log('Dispatched hard refresh keyboard event');
        } catch (e) {
          console.log('Keyboard simulation failed:', e);
        }
        
        // Method 2: Force reload with maximum cache bypass
        setTimeout(() => {
          console.log('Forcing window replacement...');
          // This should work like a hard refresh
          window.location.replace(window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search + (window.location.search ? '&' : '?') + '_t=' + Date.now());
        }, 500);
        
      }, 100);
      
      console.log('=== LOGOUT PROCESS COMPLETE ===');
    }

    function initializeGoogleOAuth() {
      console.log('=== INITIALIZING GOOGLE OAUTH ===');
      
      if (!(window as any).google?.accounts?.id) {
        console.log('‚ùå Google accounts API not loaded yet, retrying...');
        setTimeout(initializeGoogleOAuth, 500);
        return;
      }
      
      try {
        // Initialize Google OAuth  
        (window as any).google.accounts.id.initialize({
          client_id: '175048817524-o1dvmrsjvskvtth2vdno9dn28h3fkpjr.apps.googleusercontent.com',
          callback: handleCredentialResponse,
          auto_select: false,
          cancel_on_tap_outside: false
        });
        
        // Clear and recreate the sign-in button container
        const signInContainer = document.querySelector('.g_id_signin');
        if (signInContainer) {
          signInContainer.innerHTML = '';  // Clear existing content
          
          (window as any).google.accounts.id.renderButton(signInContainer, {
            type: 'standard',
            shape: 'rectangular',
            theme: 'outline',
            text: 'signin_with',
            size: 'large',
            logo_alignment: 'left'
          });
          console.log('‚úÖ Google sign-in button rendered');
        }
        
        // Show the Google container
        const googleContainer = document.getElementById('google-signin-container');
        if (googleContainer) {
          googleContainer.style.display = 'flex';
          console.log('‚úÖ Google container shown');
        }
        
        console.log('‚úÖ Google OAuth initialized successfully');
      } catch (error) {
        console.error('‚ùå Error initializing Google OAuth:', error);
      }
      
      console.log('=== GOOGLE OAUTH INITIALIZATION COMPLETE ===');
    }
    
    // Global functions for reply system
    (window as any).showReplyForm = function(commentId: string) {
      const replyForm = document.getElementById(`reply-form-${commentId}`);
      if (replyForm) {
        replyForm.style.display = 'block';
        const textarea = replyForm.querySelector('textarea');
        if (textarea) textarea.focus();
      }
    };
    
    (window as any).hideReplyForm = function(commentId: string) {
      const replyForm = document.getElementById(`reply-form-${commentId}`);
      if (replyForm) {
        replyForm.style.display = 'none';
        const textarea = replyForm.querySelector('textarea') as HTMLTextAreaElement;
        if (textarea) textarea.value = '';
      }
    };

    function showStorageInfoModal() {
      const modal = createStorageInfoModal();
      document.body.appendChild(modal);
    }

    function createStorageInfoModal() {
      const modal = document.createElement('div');
      modal.innerHTML = `
        <div class="storage-modal-overlay">
          <div class="storage-modal">
            <div class="storage-modal-header">
              <h3>üíæ Comment Storage Information</h3>
              <button class="storage-modal-close">&times;</button>
            </div>
            <div class="storage-modal-body">
              <div class="storage-info-section">
                <h4>üì± Current Setup</h4>
                <p>Comments are currently stored locally on your device using browser storage. This means:</p>
                <ul>
                  <li>‚úÖ Your comments are saved instantly</li>
                  <li>‚ùå Only you can see your comments on this device</li>
                  <li>‚ùå Comments don't sync across devices</li>
                  <li>‚ùå Other visitors can't see your comments</li>
                </ul>
              </div>
              
              <div class="storage-info-section">
                <h4>üåê For Shared Comments</h4>
                <p>To enable comments visible to all users, a backend database would be needed. This requires:</p>
                <ul>
                  <li>üóÑÔ∏è Database setup (Firebase, Supabase, etc.)</li>
                  <li>üîß Server configuration</li>
                  <li>üí∞ Hosting costs for storage</li>
                </ul>
              </div>
              
              <div class="storage-info-section">
                <h4>üîÆ Future Enhancement</h4>
                <p>This can be upgraded to a shared comment system. For now, enjoy testing the Google OAuth and beautiful UI!</p>
              </div>
              
              <button class="storage-modal-ok">Got it!</button>
            </div>
          </div>
        </div>
      `;
      
      // Add styles
      const style = document.createElement('style');
             style.textContent = `
        .storage-modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          background: rgba(0,0,0,0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 10000;
        }
        .storage-modal {
          background: white;
          border-radius: 12px;
          width: 500px;
          max-width: 90vw;
          max-height: 80vh;
          overflow-y: auto;
          box-shadow: 0 20px 40px rgba(0,0,0,0.3);
        }
        .storage-modal-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 1.5rem;
          border-bottom: 1px solid #e9ecef;
          background: linear-gradient(135deg, #4285f4, #34a853);
          color: white;
          border-radius: 12px 12px 0 0;
        }
        .storage-modal-header h3 {
          margin: 0;
          font-size: 1.25rem;
        }
        .storage-modal-close {
          background: none;
          border: none;
          color: white;
          font-size: 24px;
          cursor: pointer;
          opacity: 0.8;
          transition: opacity 0.2s;
        }
        .storage-modal-close:hover {
          opacity: 1;
        }
        .storage-modal-body {
          padding: 1.5rem;
        }
        .storage-info-section {
          margin-bottom: 1.5rem;
        }
        .storage-info-section h4 {
          color: #333;
          margin: 0 0 0.5rem 0;
          font-size: 1.1rem;
        }
        .storage-info-section p {
          color: #666;
          margin: 0 0 0.75rem 0;
          line-height: 1.5;
        }
        .storage-info-section ul {
          margin: 0;
          padding-left: 1.5rem;
        }
        .storage-info-section li {
          color: #666;
          margin-bottom: 0.5rem;
          line-height: 1.4;
        }
        .storage-modal-ok {
          width: 100%;
          padding: 0.75rem;
          background: #4285f4;
          color: white;
          border: none;
          border-radius: 6px;
          font-size: 1rem;
          font-weight: 500;
          cursor: pointer;
          transition: background 0.2s;
        }
        .storage-modal-ok:hover {
          background: #3367d6;
                 }
       `;
      modal.appendChild(style);
      
      // Add event listeners
      const closeBtn = modal.querySelector('.storage-modal-close');
      const okBtn = modal.querySelector('.storage-modal-ok');
      const overlay = modal.querySelector('.storage-modal-overlay');
      
      closeBtn?.addEventListener('click', () => modal.remove());
      okBtn?.addEventListener('click', () => modal.remove());
      overlay?.addEventListener('click', (e) => {
        if (e.target === overlay) modal.remove();
      });
      
      return modal;
    }
    
    // Debug function to clear comments (temporary)
    (window as any).clearComments = function() {
      const commentsKey = `comments_${postSlug}`;
      localStorage.removeItem(commentsKey);
      loadComments();
      console.log('Comments cleared for testing');
    };

    // Recursive function to find and add reply to nested comments
    function addReplyToComment(comments: any[], parentId: string, reply: any): boolean {
      for (let comment of comments) {
        // Check if this is the parent comment
        if (comment.id === parentId) {
          if (!comment.replies) comment.replies = [];
          comment.replies.push(reply);
          return true;
        }
        
        // Recursively check in replies
        if (comment.replies && comment.replies.length > 0) {
          if (addReplyToComment(comment.replies, parentId, reply)) {
            return true;
          }
        }
      }
      return false;
    }

    (window as any).submitReply = function(parentId: string) {
      if (!currentUser) return;
      
      const replyForm = document.getElementById(`reply-form-${parentId}`);
      const textarea = replyForm?.querySelector('textarea') as HTMLTextAreaElement;
      const replyText = textarea?.value.trim();
      
      if (!replyText) return;
      
      const reply = {
        id: 'reply_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
        author: currentUser.name,
        content: replyText,
        date: new Date().toISOString(),
        timestamp: Date.now(),
        userPicture: currentUser.picture,
        replies: [] // Initialize empty replies array for infinite nesting
      };
      
      const commentsKey = `comments_${postSlug}`;
      let comments = JSON.parse(localStorage.getItem(commentsKey) || '[]');
      
      // Add reply to the correct parent (could be deep in the tree)
      addReplyToComment(comments, parentId, reply);
      
      localStorage.setItem(commentsKey, JSON.stringify(comments));
      loadComments();
      (window as any).hideReplyForm(parentId);
    };
  });
</script> 