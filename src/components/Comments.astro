---
// Comments Component with Gmail Login
import { GOOGLE_CONFIG } from '../config/google';

interface Props {
  postSlug: string;
}

const { postSlug } = Astro.props;
---

<div class="comments-section" id="comments-section" data-post-slug={postSlug}>
  <h3>Comments</h3>
  
  <!-- Login Section -->
  <div id="login-section" class="login-section">
    <h4>Sign in to leave a comment</h4>
    
    <!-- Google Sign In Button -->
    <div id="google-signin-container" class="google-signin-centered">
      <div id="g_id_onload"
           data-client_id={GOOGLE_CONFIG.CLIENT_ID}
           data-context="signin"
           data-ux_mode="popup"
           data-callback="handleCredentialResponse"
           data-auto_prompt="false"
           style={GOOGLE_CONFIG.ENABLED ? 'display: block;' : 'display: none;'}>
      </div>
      
      <div class="g_id_signin"
           data-type="standard"
           data-shape="rectangular"
           data-theme="outline"
           data-text="signin_with"
           data-size="large"
           data-logo_alignment="left"
           style={GOOGLE_CONFIG.ENABLED ? 'display: block;' : 'display: none;'}>
      </div>
      
      <!-- Fallback custom button for development -->
      <button id="custom-google-signin" class="google-signin-btn" style={GOOGLE_CONFIG.ENABLED ? 'display: none;' : 'display: flex;'}>
        <svg width="18" height="18" viewBox="0 0 48 48">
          <path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"/>
          <path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"/>
          <path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"/>
          <path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"/>
        </svg>
        Sign in with Google
      </button>
    </div>
    

  </div>



  <!-- User Info Section (hidden initially) -->
  <div id="user-section" class="user-section" style="display: none;">
    <div class="user-info">
      <div class="user-details">
        <span id="user-name"></span>
        <button id="logout-btn" class="logout-btn">Sign Out</button>
      </div>
    </div>
  </div>

  <!-- Comment Form (hidden initially) -->
  <div id="comment-form-section" class="comment-form-section" style="display: none;">
    <form id="comment-form" class="comment-form">
      <textarea 
        id="comment-text" 
        placeholder="Write your comment..." 
        rows="4" 
        required
      ></textarea>
      <div class="form-actions">
        <button type="submit" class="submit-comment-btn">Post Comment</button>
        <button type="button" id="cancel-comment-btn" class="cancel-comment-btn">Cancel</button>
      </div>
    </form>
  </div>

  <!-- Comments List -->
  <div id="comments-list" class="comments-list">
    <!-- Comments will be loaded here -->
  </div>

  <!-- Add Comment Button (for logged in users) -->
  <button id="add-comment-btn" class="add-comment-btn" style="display: none;">
    Add a Comment
  </button>
</div>

<style>
  .comments-section {
    margin-top: 3rem;
    padding: 2rem;
    background: #f8f9fa;
    border-radius: 10px;
    border: 1px solid #e9ecef;
  }

  .comments-section h3 {
    margin-bottom: 1.5rem;
    color: #333;
    font-size: 1.5rem;
    font-weight: 600;
  }

  /* Login Section */
  .login-section {
    padding: 2rem;
    background: white;
    border-radius: 8px;
    border: 1px solid #dee2e6;
    text-align: left;
  }

  .login-section h4 {
    margin-bottom: 1.5rem;
    color: #333;
    text-align: center;
    font-size: 1.2rem;
  }

  .login-form {
    max-width: 300px;
    margin: 0 auto;
  }

  .google-signin-btn {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    padding: 12px 16px;
    background: #4285f4;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 1rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .google-signin-btn:hover {
    background: #3367d6;
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    transform: translateY(-1px);
  }

  .google-signin-btn:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .google-signin-centered {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    margin: 1rem 0 2rem 0;
  }

  .google-signin-centered .g_id_signin {
    margin: 0 auto;
  }

  .auth-divider {
    text-align: center;
    margin: 1.5rem 0;
    position: relative;
  }

  .auth-divider::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background: #e9ecef;
  }

  .auth-divider span {
    background: white;
    padding: 0 1rem;
    color: #666;
    font-size: 0.9rem;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #333;
    font-weight: 500;
    font-size: 0.9rem;
  }

  .form-group input {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid #e9ecef;
    border-radius: 6px;
    font-size: 1rem;
    font-family: inherit;
    box-sizing: border-box;
    transition: border-color 0.3s ease;
  }

  .form-group input:focus {
    outline: none;
    border-color: #4285f4;
    box-shadow: 0 0 0 3px rgba(66, 133, 244, 0.1);
  }

  .login-btn {
    width: 100%;
    padding: 0.75rem;
    background: #4285f4;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
    margin-bottom: 1rem;
  }

  .login-btn:hover {
    background: #3367d6;
  }

  .auth-toggle {
    text-align: center;
  }

  .auth-toggle p {
    margin: 0;
    color: #666;
    font-size: 0.9rem;
  }

  .link-btn {
    background: none;
    border: none;
    color: #4285f4;
    text-decoration: underline;
    cursor: pointer;
    font-size: inherit;
    padding: 0;
  }

  .link-btn:hover {
    color: #3367d6;
  }

  .auth-error {
    color: #dc3545;
    font-size: 0.85rem;
    margin-top: 0.5rem;
    text-align: center;
  }

  /* User Section */
  .user-section {
    margin-bottom: 1.5rem;
  }

  .user-info {
    padding: 1rem;
    background: white;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  .user-details {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .logout-btn {
    padding: 0.4rem 0.8rem;
    background: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 0.85rem;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .logout-btn:hover {
    background: #c82333;
  }

  /* Comment Form */
  .comment-form-section {
    margin-bottom: 2rem;
  }

  .comment-form {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  .comment-form textarea {
    width: 100%;
    border: 2px solid #e9ecef;
    border-radius: 6px;
    padding: 0.75rem;
    font-size: 1rem;
    font-family: inherit;
    resize: vertical;
    min-height: 100px;
    box-sizing: border-box;
  }

  .comment-form textarea:focus {
    outline: none;
    border-color: #4285f4;
    box-shadow: 0 0 0 3px rgba(66, 133, 244, 0.1);
  }

  .form-actions {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .submit-comment-btn {
    padding: 0.75rem 1.5rem;
    background: #4285f4;
    color: white;
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .submit-comment-btn:hover {
    background: #3367d6;
  }

  .cancel-comment-btn {
    padding: 0.75rem 1.5rem;
    background: #6c757d;
    color: white;
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .cancel-comment-btn:hover {
    background: #5a6268;
  }

  /* Add Comment Button */
  .add-comment-btn {
    width: 100%;
    padding: 1rem;
    background: #4285f4;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
    margin-bottom: 2rem;
  }

  .add-comment-btn:hover {
    background: #3367d6;
  }

  /* Comments List */
  .comments-list {
    space-y: 1rem;
  }

  .comment-item {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    border: 1px solid #dee2e6;
    margin-bottom: 1rem;
  }

  .comment-main {
    /* Main comment styling */
  }

  .comment-thread {
    /* Container for main comment + its replies */
  }

  .comment-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
  }

  .comment-author {
    font-weight: 600;
    color: #333;
  }

  .comment-date {
    color: #6c757d;
    font-size: 0.9rem;
  }

  .comment-content {
    color: #495057;
    line-height: 1.5;
    white-space: pre-wrap;
    margin-bottom: 0.75rem;
  }

  .comment-actions {
    display: flex;
    gap: 0.5rem;
  }

  .reply-btn {
    padding: 0.25rem 0.5rem;
    background: transparent;
    color: #4285f4;
    border: 1px solid #4285f4;
    border-radius: 4px;
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .reply-btn:hover {
    background: #4285f4;
    color: white;
  }

  .replies-container {
    margin-left: 40px;
    margin-top: 1rem;
    border-left: 3px solid #4285f4;
    padding-left: 20px;
  }

  .reply-item {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 6px;
    margin-bottom: 0.75rem;
    border: 1px solid #e9ecef;
    position: relative;
  }

  .reply-item::before {
    content: "↳";
    position: absolute;
    left: -15px;
    top: 10px;
    color: #4285f4;
    font-weight: bold;
  }

  .reply-form {
    margin-top: 1rem;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 6px;
    border: 1px solid #e9ecef;
  }

  .reply-form textarea {
    width: 100%;
    border: 2px solid #e9ecef;
    border-radius: 6px;
    padding: 0.5rem;
    font-size: 0.9rem;
    font-family: inherit;
    resize: vertical;
    min-height: 80px;
    box-sizing: border-box;
    background: white;
  }

  .reply-form textarea:focus {
    outline: none;
    border-color: #4285f4;
    box-shadow: 0 0 0 3px rgba(66, 133, 244, 0.1);
  }

  .reply-actions {
    display: flex;
    gap: 0.5rem;
    margin-top: 0.75rem;
  }

  .submit-reply-btn {
    padding: 0.5rem 1rem;
    background: #4285f4;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 0.85rem;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .submit-reply-btn:hover {
    background: #3367d6;
  }

  .cancel-reply-btn {
    padding: 0.5rem 1rem;
    background: #6c757d;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 0.85rem;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .cancel-reply-btn:hover {
    background: #5a6268;
  }

  .no-comments {
    text-align: center;
    color: #6c757d;
    padding: 2rem;
    background: white;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  /* Dark Mode */
  html.dark .comments-section {
    background: #2d3748;
    border-color: #4a5568;
  }

  html.dark .comments-section h3 {
    color: #e2e8f0;
  }

  html.dark .login-section,
  html.dark .user-info,
  html.dark .comment-form,
  html.dark .comment-item,
  html.dark .no-comments {
    background: #1a202c;
    border-color: #4a5568;
  }

  html.dark .login-section h4,
  html.dark .form-group label {
    color: #e2e8f0;
  }

  html.dark .form-group input {
    background: #2d3748;
    border-color: #4a5568;
    color: #e2e8f0;
  }

  html.dark .form-group input:focus {
    border-color: #4285f4;
  }

  html.dark .login-section p,
  html.dark .comment-date,
  html.dark .no-comments {
    color: #a0aec0;
  }

  html.dark .comment-author,
  html.dark .comment-content {
    color: #e2e8f0;
  }

  html.dark .comment-form textarea,
  html.dark .reply-form textarea {
    background: #2d3748;
    border-color: #4a5568;
    color: #e2e8f0;
  }

  html.dark .comment-form textarea:focus,
  html.dark .reply-form textarea:focus {
    border-color: #4285f4;
  }

  html.dark .reply-item {
    background: #2d3748;
    border-color: #4a5568;
  }

  html.dark .reply-form {
    background: #2d3748;
    border-color: #4a5568;
  }

  html.dark .replies-container {
    border-left-color: #4285f4;
  }

  html.dark .auth-divider span {
    background: #1a202c;
    color: #a0aec0;
  }

  html.dark .auth-divider::before {
    background: #4a5568;
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .comments-section {
      padding: 1.5rem;
      margin-top: 2rem;
    }

    .user-details {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .form-actions,
    .reply-actions {
      flex-direction: column;
    }

    .submit-comment-btn,
    .cancel-comment-btn,
    .submit-reply-btn,
    .cancel-reply-btn {
      width: 100%;
    }

    .replies-container {
      margin-left: 20px;
      padding-left: 15px;
    }

    .reply-item::before {
      left: -10px;
    }

    .comment-actions {
      flex-wrap: wrap;
    }
  }
</style>

<!-- Google Identity Services -->
<script src="https://accounts.google.com/gsi/client" async defer></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const postSlug = document.querySelector('.comments-section')?.getAttribute('data-post-slug') || 'unknown';
    
    // Mock user data (in real implementation, this would come from Google OAuth)
    let currentUser: any = null;
    
    // DOM elements
    const loginSection = document.getElementById('login-section');
    const registerSection = document.getElementById('register-section');
    const userSection = document.getElementById('user-section');
    const commentFormSection = document.getElementById('comment-form-section');
    const commentsList = document.getElementById('comments-list');
    const addCommentBtn = document.getElementById('add-comment-btn');
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    const googleSigninBtn = document.getElementById('google-signin-btn');
    const logoutBtn = document.getElementById('logout-btn');
    const commentForm = document.getElementById('comment-form');
    const cancelCommentBtn = document.getElementById('cancel-comment-btn');
    const showRegisterBtn = document.getElementById('show-register');
    const showLoginBtn = document.getElementById('show-login');
    
    // Check if user is already logged in
    checkLoginStatus();
    
    // Load comments for this post
    loadComments();
    
    // Event listeners
    if (loginForm) {
      loginForm.addEventListener('submit', handleLogin);
    }
    
    if (registerForm) {
      registerForm.addEventListener('submit', handleRegister);
    }
    
    if (googleSigninBtn) {
      googleSigninBtn.addEventListener('click', handleCustomGoogleSignIn);
      console.log('Development Google Sign-In button activated (fallback mode)');
    }
    
    if (showRegisterBtn) {
      showRegisterBtn.addEventListener('click', showRegisterForm);
    }
    
    if (showLoginBtn) {
      showLoginBtn.addEventListener('click', showLoginForm);
    }
    
    if (logoutBtn) {
      logoutBtn.addEventListener('click', handleLogout);
    }
    
    if (addCommentBtn) {
      addCommentBtn.addEventListener('click', showCommentForm);
    }
    
    if (cancelCommentBtn) {
      cancelCommentBtn.addEventListener('click', hideCommentForm);
    }
    
    if (commentForm) {
      commentForm.addEventListener('submit', handleCommentSubmit);
    }
    
    function checkLoginStatus() {
      const userData = localStorage.getItem('blog-user');
      if (userData) {
        currentUser = JSON.parse(userData);
        showLoggedInState();
      } else {
        showLoggedOutState();
      }
    }
    
    // Real Google OAuth callback function
    function handleCredentialResponse(response: any) {
      try {
        // Decode the JWT token to get user info
        const payload = JSON.parse(atob(response.credential.split('.')[1]));
        
        const user = {
          id: 'google_' + payload.sub,
          name: payload.name,
          email: payload.email,
          picture: payload.picture,
          provider: 'google'
        };
        
        currentUser = user;
        localStorage.setItem('blog-user', JSON.stringify(currentUser));
        showLoggedInState();
        
        console.log('Google Sign-In successful:', user);
      } catch (error) {
        console.error('Error processing Google Sign-In:', error);
                           console.error('Failed to sign in with Google. Please try again.');
      }
    }
    
    // Make handleCredentialResponse available globally
    (window as any).handleCredentialResponse = handleCredentialResponse;
    
    // Fallback custom Google sign-in for development
    function handleCustomGoogleSignIn() {
      // This is a fallback for development when Google Client ID is not configured
      const modal = createGmailModal();
      document.body.appendChild(modal);
    }
    
    function createGmailModal() {
      const modal = document.createElement('div');
      modal.innerHTML = `
        <div class="gmail-modal-overlay">
          <div class="gmail-modal">
            <div class="gmail-modal-header">
              <h3>Development Mode - Gmail Simulation</h3>
              <button class="gmail-modal-close">&times;</button>
            </div>
            <div class="gmail-modal-body">
              <p style="color: #666; margin-bottom: 15px; font-size: 14px;">
                This is a development simulation. In production, you'll use real Google OAuth.
              </p>
              <div class="gmail-form-group">
                <label>Gmail Address</label>
                <input type="email" id="gmail-email" placeholder="yourname@gmail.com" />
              </div>
              <div class="gmail-form-group">
                <label>Your Name</label>
                <input type="text" id="gmail-name" placeholder="Enter your name" />
              </div>
              <div class="gmail-error" style="display: none;"></div>
              <button class="gmail-submit-btn">Sign In (Development)</button>
            </div>
          </div>
        </div>
      `;
      
      // Add styles (same as before but simplified)
      const style = document.createElement('style');
      style.textContent = `
        .gmail-modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          background: rgba(0,0,0,0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 10000;
        }
        .gmail-modal {
          background: white;
          border-radius: 8px;
          width: 400px;
          max-width: 90vw;
          box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }
        .gmail-modal-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 20px;
          border-bottom: 1px solid #e9ecef;
        }
        .gmail-modal-header h3 {
          margin: 0;
          color: #333;
          font-size: 16px;
        }
        .gmail-modal-close {
          background: none;
          border: none;
          font-size: 24px;
          cursor: pointer;
          color: #666;
        }
        .gmail-modal-body {
          padding: 20px;
        }
        .gmail-form-group {
          margin-bottom: 15px;
        }
        .gmail-form-group label {
          display: block;
          margin-bottom: 5px;
          font-weight: 500;
          color: #333;
        }
        .gmail-form-group input {
          width: 100%;
          padding: 12px;
          border: 2px solid #e9ecef;
          border-radius: 6px;
          font-size: 16px;
          box-sizing: border-box;
        }
        .gmail-form-group input:focus {
          outline: none;
          border-color: #4285f4;
        }
        .gmail-error {
          color: #dc3545;
          font-size: 14px;
          margin-bottom: 15px;
          padding: 10px;
          background: #f8d7da;
          border-radius: 4px;
        }
        .gmail-submit-btn {
          width: 100%;
          padding: 12px;
          background: #4285f4;
          color: white;
          border: none;
          border-radius: 6px;
          font-size: 16px;
          font-weight: 500;
          cursor: pointer;
        }
        .gmail-submit-btn:hover {
          background: #3367d6;
        }
      `;
      modal.appendChild(style);
      
      // Add event listeners
      const closeBtn = modal.querySelector('.gmail-modal-close');
      const submitBtn = modal.querySelector('.gmail-submit-btn');
      const overlay = modal.querySelector('.gmail-modal-overlay');
      
      closeBtn?.addEventListener('click', () => modal.remove());
      overlay?.addEventListener('click', (e) => {
        if (e.target === overlay) modal.remove();
      });
      
      submitBtn?.addEventListener('click', () => {
        const email = (modal.querySelector('#gmail-email') as HTMLInputElement)?.value.trim().toLowerCase();
        const name = (modal.querySelector('#gmail-name') as HTMLInputElement)?.value.trim();
        const errorDiv = modal.querySelector('.gmail-error') as HTMLElement;
        
        if (!email || !name) {
          showGmailError(errorDiv, 'Please fill in all fields');
          return;
        }
        
        if (!email.endsWith('@gmail.com')) {
          showGmailError(errorDiv, 'Please enter a valid Gmail address (must end with @gmail.com)');
          return;
        }
        
        const user = {
          id: 'gmail_dev_' + Date.now(),
          name: name,
          email: email,
          provider: 'gmail'
        };
        
        currentUser = user;
        localStorage.setItem('blog-user', JSON.stringify(currentUser));
        showLoggedInState();
        modal.remove();
      });
      
      return modal;
    }
    
    function showGmailError(errorDiv: HTMLElement, message: string) {
      errorDiv.textContent = message;
      errorDiv.style.display = 'block';
      setTimeout(() => {
        errorDiv.style.display = 'none';
      }, 5000);
    }
    
    function showRegisterForm() {
      if (loginSection) loginSection.style.display = 'none';
      if (registerSection) registerSection.style.display = 'block';
    }
    
    function showLoginForm() {
      if (registerSection) registerSection.style.display = 'none';
      if (loginSection) loginSection.style.display = 'block';
    }
    
    function handleRegister(e: any) {
      e.preventDefault();
      
      const name = (document.getElementById('register-name') as HTMLInputElement)?.value.trim();
      const email = (document.getElementById('register-email') as HTMLInputElement)?.value.trim().toLowerCase();
      const password = (document.getElementById('register-password') as HTMLInputElement)?.value;
      
      if (!name || !email || !password) {
        showError('register-form', 'Please fill in all fields');
        return;
      }
      
      if (!email.includes('@')) {
        showError('register-form', 'Please enter a valid email address');
        return;
      }
      
      if (password.length < 6) {
        showError('register-form', 'Password must be at least 6 characters');
        return;
      }
      
      // Check if user already exists
      const existingUsers = JSON.parse(localStorage.getItem('blog-users') || '{}');
      if (existingUsers[email]) {
        showError('register-form', 'An account with this email already exists');
        return;
      }
      
      // Create new user
      const user = {
        id: 'user_' + Date.now(),
        name: name,
        email: email,
        password: password // In real app, this would be hashed
      };
      
      // Save to users database
      existingUsers[email] = user;
      localStorage.setItem('blog-users', JSON.stringify(existingUsers));
      
      // Log user in
      currentUser = user;
      localStorage.setItem('blog-user', JSON.stringify(currentUser));
      showLoggedInState();
    }
    
    function handleLogin(e: any) {
      e.preventDefault();
      
      const email = (document.getElementById('login-email') as HTMLInputElement)?.value.trim().toLowerCase();
      const password = (document.getElementById('login-password') as HTMLInputElement)?.value;
      
      if (!email || !password) {
        showError('login-form', 'Please fill in all fields');
        return;
      }
      
      // Check if user exists
      const existingUsers = JSON.parse(localStorage.getItem('blog-users') || '{}');
      const user = existingUsers[email];
      
      if (!user) {
        showError('login-form', 'No account found with this email');
        return;
      }
      
      if (user.password !== password) {
        showError('login-form', 'Incorrect password');
        return;
      }
      
      // Log user in
      currentUser = user;
      localStorage.setItem('blog-user', JSON.stringify(currentUser));
      showLoggedInState();
    }
    
    function showError(formId: string, message: string) {
      const form = document.getElementById(formId);
      if (!form) return;
      
      // Remove existing error
      const existingError = form.querySelector('.auth-error');
      if (existingError) existingError.remove();
      
      // Add new error
      const errorDiv = document.createElement('div');
      errorDiv.className = 'auth-error';
      errorDiv.textContent = message;
      form.appendChild(errorDiv);
      
      // Remove error after 5 seconds
      setTimeout(() => {
        if (errorDiv.parentNode) errorDiv.remove();
      }, 5000);
    }
    
    function showLoggedInState() {
      if (!currentUser) return;
      
      if (loginSection) loginSection.style.display = 'none';
      if (registerSection) registerSection.style.display = 'none';
      if (userSection) userSection.style.display = 'block';
      if (addCommentBtn) addCommentBtn.style.display = 'block';
      
      // Update user info
      const userName = document.getElementById('user-name');
      
      if (userName) userName.textContent = currentUser.name;
    }
    
    function showLoggedOutState() {
      if (loginSection) loginSection.style.display = 'block';
      if (registerSection) registerSection.style.display = 'none';
      if (userSection) userSection.style.display = 'none';
      if (addCommentBtn) addCommentBtn.style.display = 'none';
    }
    
    function showCommentForm() {
      if (commentFormSection) {
        commentFormSection.style.display = 'block';
        const textarea = document.getElementById('comment-text');
        if (textarea) textarea.focus();
      }
      if (addCommentBtn) addCommentBtn.style.display = 'none';
    }
    
    function hideCommentForm() {
      if (commentFormSection) commentFormSection.style.display = 'none';
      if (addCommentBtn && currentUser) addCommentBtn.style.display = 'block';
      
      const textarea = document.getElementById('comment-text') as HTMLTextAreaElement;
      if (textarea) textarea.value = '';
    }
    
    function handleCommentSubmit(e: any) {
      e.preventDefault();
      
      if (!currentUser) return;
      
      const textarea = document.getElementById('comment-text') as HTMLTextAreaElement;
      const commentText = textarea?.value.trim();
      
      if (!commentText) return;
      
      const comment = {
        id: 'comment_' + Date.now(),
        postSlug: postSlug,
        author: currentUser.name,
        content: commentText,
        date: new Date().toISOString(),
        timestamp: Date.now(),
        replies: []
      };
      
      saveComment(comment);
      loadComments();
      hideCommentForm();
    }
    
    function saveComment(comment: any) {
      const commentsKey = `comments_${postSlug}`;
      let comments = JSON.parse(localStorage.getItem(commentsKey) || '[]');
      comments.unshift(comment); // Add to beginning (newest first)
      localStorage.setItem(commentsKey, JSON.stringify(comments));
    }
    
    function loadComments() {
      const commentsKey = `comments_${postSlug}`;
      const comments = JSON.parse(localStorage.getItem(commentsKey) || '[]');
      
      if (!commentsList) return;
      
      if (comments.length === 0) {
        commentsList.innerHTML = '<div class="no-comments">No comments yet. Be the first to comment!</div>';
        return;
      }
      
      commentsList.innerHTML = comments.map((comment: any) => {
        const repliesHtml = (comment.replies && comment.replies.length > 0) ? `
          <div class="replies-container">
            ${comment.replies.map((reply: any) => `
              <div class="reply-item">
                <div class="comment-header">
                  <span class="comment-author">${reply.author}</span>
                  <span class="comment-date">${formatDate(reply.date)}</span>
                </div>
                <div class="comment-content">${reply.content}</div>
              </div>
            `).join('')}
          </div>
        ` : '';
        
        return `
          <div class="comment-thread">
            <div class="comment-item comment-main" data-comment-id="${comment.id}">
              <div class="comment-header">
                <span class="comment-author">${comment.author}</span>
                <span class="comment-date">${formatDate(comment.date)}</span>
              </div>
              <div class="comment-content">${comment.content}</div>
              <div class="comment-actions">
                ${currentUser ? `<button class="reply-btn" onclick="showReplyForm('${comment.id}')">Reply</button>` : ''}
              </div>
              <div id="reply-form-${comment.id}" class="reply-form" style="display: none;">
                <textarea placeholder="Write a reply..." rows="3"></textarea>
                <div class="reply-actions">
                  <button class="submit-reply-btn" onclick="submitReply('${comment.id}')">Post Reply</button>
                  <button class="cancel-reply-btn" onclick="hideReplyForm('${comment.id}')">Cancel</button>
                </div>
              </div>
            </div>
            ${repliesHtml}
          </div>
        `;
      }).join('');
    }
    
    function formatDate(dateString: any) {
      const date = new Date(dateString);
      return date.toLocaleDateString() + ' at ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    }
    
    function handleLogout() {
      currentUser = null;
      localStorage.removeItem('blog-user');
      showLoggedOutState();
      hideCommentForm();
    }
    
    // Global functions for reply system
    (window as any).showReplyForm = function(commentId: string) {
      const replyForm = document.getElementById(`reply-form-${commentId}`);
      if (replyForm) {
        replyForm.style.display = 'block';
        const textarea = replyForm.querySelector('textarea');
        if (textarea) textarea.focus();
      }
    };
    
    (window as any).hideReplyForm = function(commentId: string) {
      const replyForm = document.getElementById(`reply-form-${commentId}`);
      if (replyForm) {
        replyForm.style.display = 'none';
        const textarea = replyForm.querySelector('textarea') as HTMLTextAreaElement;
        if (textarea) textarea.value = '';
      }
    };
    
    (window as any).submitReply = function(commentId: string) {
      if (!currentUser) return;
      
      const replyForm = document.getElementById(`reply-form-${commentId}`);
      const textarea = replyForm?.querySelector('textarea') as HTMLTextAreaElement;
      const replyText = textarea?.value.trim();
      
      if (!replyText) return;
      
      const reply = {
        id: 'reply_' + Date.now(),
        author: currentUser.name,
        content: replyText,
        date: new Date().toISOString(),
        timestamp: Date.now()
      };
      
      const commentsKey = `comments_${postSlug}`;
      let comments = JSON.parse(localStorage.getItem(commentsKey) || '[]');
      
      // Find the parent comment and add the reply
      comments = comments.map((comment: any) => {
        if (comment.id === commentId) {
          if (!comment.replies) comment.replies = [];
          comment.replies.push(reply);
        }
        return comment;
      });
      
      localStorage.setItem(commentsKey, JSON.stringify(comments));
      loadComments();
      (window as any).hideReplyForm(commentId);
    };
  });
</script> 